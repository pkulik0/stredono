// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/chat_message.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Role } from "./chat_role_pb.js";

/**
 * @generated from message stredono.ChatMessage
 */
export class ChatMessage extends Message<ChatMessage> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string ChatID = 2;
   */
  ChatID = "";

  /**
   * @generated from field: string ChatName = 3;
   */
  ChatName = "";

  /**
   * @generated from field: string SenderID = 4;
   */
  SenderID = "";

  /**
   * @generated from field: string SenderName = 5;
   */
  SenderName = "";

  /**
   * @generated from field: stredono.Role SenderRole = 6;
   */
  SenderRole = Role.NORMAL;

  /**
   * @generated from field: bool SenderIsSubscriber = 7;
   */
  SenderIsSubscriber = false;

  /**
   * @generated from field: string Message = 8;
   */
  Message = "";

  /**
   * @generated from field: int64 Timestamp = 9;
   */
  Timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<ChatMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.ChatMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ChatID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ChatName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "SenderID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "SenderName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "SenderRole", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 7, name: "SenderIsSubscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "Timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessage {
    return new ChatMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessage | PlainMessage<ChatMessage> | undefined, b: ChatMessage | PlainMessage<ChatMessage> | undefined): boolean {
    return proto3.util.equals(ChatMessage, a, b);
  }
}

