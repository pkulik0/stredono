// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/tts_settings.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Tier } from "./enums_pb.js";

/**
 * @generated from message stredono.TTSSettings
 */
export class TTSSettings extends Message<TTSSettings> {
  /**
   * @generated from field: string VoiceIdBasic = 1;
   */
  VoiceIdBasic = "";

  /**
   * @generated from field: string VoiceIdPlus = 2;
   */
  VoiceIdPlus = "";

  /**
   * @generated from field: stredono.Tier Tier = 3;
   */
  Tier = Tier.BASIC;

  constructor(data?: PartialMessage<TTSSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "VoiceIdBasic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "VoiceIdPlus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Tier", kind: "enum", T: proto3.getEnumType(Tier) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSSettings {
    return new TTSSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSSettings {
    return new TTSSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSSettings {
    return new TTSSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TTSSettings | PlainMessage<TTSSettings> | undefined, b: TTSSettings | PlainMessage<TTSSettings> | undefined): boolean {
    return proto3.util.equals(TTSSettings, a, b);
  }
}

