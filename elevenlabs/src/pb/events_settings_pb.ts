// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/events_settings.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TTSSettings } from "./tts_settings_pb.js";

/**
 * @generated from message stredono.EventsSettings
 */
export class EventsSettings extends Message<EventsSettings> {
  /**
   * @generated from field: stredono.TTSSettings TTS = 1;
   */
  TTS?: TTSSettings;

  /**
   * string = EventType name (more stable than int32 I guess)
   *
   * @generated from field: map<string, stredono.EventSettings> Event = 2;
   */
  Event: { [key: string]: EventSettings } = {};

  /**
   * @generated from field: bool RequireApproval = 3;
   */
  RequireApproval = false;

  constructor(data?: PartialMessage<EventsSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.EventsSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "TTS", kind: "message", T: TTSSettings },
    { no: 2, name: "Event", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EventSettings} },
    { no: 3, name: "RequireApproval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsSettings {
    return new EventsSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsSettings {
    return new EventsSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsSettings {
    return new EventsSettings().fromJsonString(jsonString, options);
  }

  static equals(a: EventsSettings | PlainMessage<EventsSettings> | undefined, b: EventsSettings | PlainMessage<EventsSettings> | undefined): boolean {
    return proto3.util.equals(EventsSettings, a, b);
  }
}

/**
 * @generated from message stredono.EventSettings
 */
export class EventSettings extends Message<EventSettings> {
  /**
   * @generated from field: int32 MinimumValue = 1;
   */
  MinimumValue = 0;

  /**
   * @generated from field: bool EnableTTS = 2;
   */
  EnableTTS = false;

  /**
   * @generated from field: optional int32 MinimumForTTS = 3;
   */
  MinimumForTTS?: number;

  /**
   * @generated from field: string MessageTemplate = 4;
   */
  MessageTemplate = "";

  constructor(data?: PartialMessage<EventSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.EventSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MinimumValue", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "EnableTTS", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "MinimumForTTS", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "MessageTemplate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSettings {
    return new EventSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSettings {
    return new EventSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSettings {
    return new EventSettings().fromJsonString(jsonString, options);
  }

  static equals(a: EventSettings | PlainMessage<EventSettings> | undefined, b: EventSettings | PlainMessage<EventSettings> | undefined): boolean {
    return proto3.util.equals(EventSettings, a, b);
  }
}

