// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/stredono.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum stredono.Currency
 */
export enum Currency {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: PLN = 1;
   */
  PLN = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Currency)
proto3.util.setEnumType(Currency, "stredono.Currency", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "PLN" },
]);

/**
 * @generated from enum stredono.TipStatus
 */
export enum TipStatus {
  /**
   * @generated from enum value: INITIATED = 0;
   */
  INITIATED = 0,

  /**
   * @generated from enum value: PAYMENT_PENDING = 1;
   */
  PAYMENT_PENDING = 1,

  /**
   * @generated from enum value: PAYMENT_SUCCESS = 2;
   */
  PAYMENT_SUCCESS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TipStatus)
proto3.util.setEnumType(TipStatus, "stredono.TipStatus", [
  { no: 0, name: "INITIATED" },
  { no: 1, name: "PAYMENT_PENDING" },
  { no: 2, name: "PAYMENT_SUCCESS" },
]);

/**
 * @generated from enum stredono.AuthLevel
 */
export enum AuthLevel {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: EMAIL = 1;
   */
  EMAIL = 1,

  /**
   * @generated from enum value: OIDC = 2;
   */
  OIDC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthLevel)
proto3.util.setEnumType(AuthLevel, "stredono.AuthLevel", [
  { no: 0, name: "NONE" },
  { no: 1, name: "EMAIL" },
  { no: 2, name: "OIDC" },
]);

/**
 * @generated from enum stredono.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: TIP = 0;
   */
  TIP = 0,

  /**
   * @generated from enum value: CHEER = 1;
   */
  CHEER = 1,

  /**
   * @generated from enum value: FOLLOW = 2;
   */
  FOLLOW = 2,

  /**
   * @generated from enum value: SUBSCRIBE = 3;
   */
  SUBSCRIBE = 3,

  /**
   * @generated from enum value: SUBGIFT = 4;
   */
  SUBGIFT = 4,

  /**
   * @generated from enum value: RAID = 5;
   */
  RAID = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(EventType)
proto3.util.setEnumType(EventType, "stredono.EventType", [
  { no: 0, name: "TIP" },
  { no: 1, name: "CHEER" },
  { no: 2, name: "FOLLOW" },
  { no: 3, name: "SUBSCRIBE" },
  { no: 4, name: "SUBGIFT" },
  { no: 5, name: "RAID" },
]);

/**
 * @generated from enum stredono.AnimationType
 */
export enum AnimationType {
  /**
   * @generated from enum value: PULSE = 0;
   */
  PULSE = 0,

  /**
   * @generated from enum value: HEART_BEAT = 2;
   */
  HEART_BEAT = 2,

  /**
   * @generated from enum value: SHAKE_VERTICALLY = 4;
   */
  SHAKE_VERTICALLY = 4,

  /**
   * @generated from enum value: SHAKE_HORIZONTALLY = 5;
   */
  SHAKE_HORIZONTALLY = 5,

  /**
   * @generated from enum value: TADA = 8;
   */
  TADA = 8,

  /**
   * @generated from enum value: JELLO = 9;
   */
  JELLO = 9,

  /**
   * @generated from enum value: BOUNCE = 10;
   */
  BOUNCE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(AnimationType)
proto3.util.setEnumType(AnimationType, "stredono.AnimationType", [
  { no: 0, name: "PULSE" },
  { no: 2, name: "HEART_BEAT" },
  { no: 4, name: "SHAKE_VERTICALLY" },
  { no: 5, name: "SHAKE_HORIZONTALLY" },
  { no: 8, name: "TADA" },
  { no: 9, name: "JELLO" },
  { no: 10, name: "BOUNCE" },
]);

/**
 * @generated from enum stredono.Alignment
 */
export enum Alignment {
  /**
   * @generated from enum value: START = 0;
   */
  START = 0,

  /**
   * @generated from enum value: CENTER = 1;
   */
  CENTER = 1,

  /**
   * @generated from enum value: END = 2;
   */
  END = 2,

  /**
   * @generated from enum value: JUSTIFY = 3;
   */
  JUSTIFY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Alignment)
proto3.util.setEnumType(Alignment, "stredono.Alignment", [
  { no: 0, name: "START" },
  { no: 1, name: "CENTER" },
  { no: 2, name: "END" },
  { no: 3, name: "JUSTIFY" },
]);

/**
 * @generated from enum stredono.Position
 */
export enum Position {
  /**
   * @generated from enum value: TOP = 0;
   */
  TOP = 0,

  /**
   * @generated from enum value: LEFT = 1;
   */
  LEFT = 1,

  /**
   * @generated from enum value: RIGHT = 2;
   */
  RIGHT = 2,

  /**
   * @generated from enum value: BOTTOM = 3;
   */
  BOTTOM = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Position)
proto3.util.setEnumType(Position, "stredono.Position", [
  { no: 0, name: "TOP" },
  { no: 1, name: "LEFT" },
  { no: 2, name: "RIGHT" },
  { no: 3, name: "BOTTOM" },
]);

/**
 * @generated from enum stredono.Speed
 */
export enum Speed {
  /**
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: SLOW = 1;
   */
  SLOW = 1,

  /**
   * @generated from enum value: MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * @generated from enum value: FAST = 3;
   */
  FAST = 3,

  /**
   * @generated from enum value: FASTER = 4;
   */
  FASTER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Speed)
proto3.util.setEnumType(Speed, "stredono.Speed", [
  { no: 0, name: "OFF" },
  { no: 1, name: "SLOW" },
  { no: 2, name: "MEDIUM" },
  { no: 3, name: "FAST" },
  { no: 4, name: "FASTER" },
]);

/**
 * @generated from enum stredono.Tier
 */
export enum Tier {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: PLUS = 1;
   */
  PLUS = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Tier)
proto3.util.setEnumType(Tier, "stredono.Tier", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "PLUS" },
]);

/**
 * @generated from enum stredono.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: NOT_SPECIFIED = 0;
   */
  NOT_SPECIFIED = 0,

  /**
   * @generated from enum value: MALE = 1;
   */
  MALE = 1,

  /**
   * @generated from enum value: FEMALE = 2;
   */
  FEMALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, "stredono.Gender", [
  { no: 0, name: "NOT_SPECIFIED" },
  { no: 1, name: "MALE" },
  { no: 2, name: "FEMALE" },
]);

/**
 * @generated from enum stredono.Frequency
 */
export enum Frequency {
  /**
   * @generated from enum value: NEVER = 0;
   */
  NEVER = 0,

  /**
   * @generated from enum value: ALWAYS = 1;
   */
  ALWAYS = 1,

  /**
   * @generated from enum value: EVERY_MINUTE = 2;
   */
  EVERY_MINUTE = 2,

  /**
   * @generated from enum value: EVERY_FIVE_MINUTES = 3;
   */
  EVERY_FIVE_MINUTES = 3,

  /**
   * @generated from enum value: EVERY_QUARTER_HOUR = 4;
   */
  EVERY_QUARTER_HOUR = 4,

  /**
   * @generated from enum value: EVERY_HALF_HOUR = 5;
   */
  EVERY_HALF_HOUR = 5,

  /**
   * @generated from enum value: EVERY_HOUR = 6;
   */
  EVERY_HOUR = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Frequency)
proto3.util.setEnumType(Frequency, "stredono.Frequency", [
  { no: 0, name: "NEVER" },
  { no: 1, name: "ALWAYS" },
  { no: 2, name: "EVERY_MINUTE" },
  { no: 3, name: "EVERY_FIVE_MINUTES" },
  { no: 4, name: "EVERY_QUARTER_HOUR" },
  { no: 5, name: "EVERY_HALF_HOUR" },
  { no: 6, name: "EVERY_HOUR" },
]);

/**
 * @generated from message stredono.Tip
 */
export class Tip extends Message<Tip> {
  /**
   * @generated from field: string SenderId = 1;
   */
  SenderId = "";

  /**
   * @generated from field: string DisplayName = 2;
   */
  DisplayName = "";

  /**
   * @generated from field: string Email = 3;
   */
  Email = "";

  /**
   * @generated from field: string Message = 4;
   */
  Message = "";

  /**
   * @generated from field: double Amount = 5;
   */
  Amount = 0;

  /**
   * @generated from field: stredono.Currency Currency = 6;
   */
  Currency = Currency.UNKNOWN;

  /**
   * @generated from field: string RecipientId = 7;
   */
  RecipientId = "";

  /**
   * @generated from field: stredono.TipStatus Status = 8;
   */
  Status = TipStatus.INITIATED;

  /**
   * @generated from field: int64 Timestamp = 9;
   */
  Timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<Tip>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Tip";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "SenderId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "Currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 7, name: "RecipientId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "Status", kind: "enum", T: proto3.getEnumType(TipStatus) },
    { no: 9, name: "Timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tip {
    return new Tip().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tip {
    return new Tip().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tip {
    return new Tip().fromJsonString(jsonString, options);
  }

  static equals(a: Tip | PlainMessage<Tip> | undefined, b: Tip | PlainMessage<Tip> | undefined): boolean {
    return proto3.util.equals(Tip, a, b);
  }
}

/**
 * @generated from message stredono.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string Uid = 1;
   */
  Uid = "";

  /**
   * @generated from field: string Username = 2;
   */
  Username = "";

  /**
   * @generated from field: string DisplayName = 3;
   */
  DisplayName = "";

  /**
   * @generated from field: string Description = 4;
   */
  Description = "";

  /**
   * @generated from field: string PictureUrl = 5;
   */
  PictureUrl = "";

  /**
   * @generated from field: string Url = 6;
   */
  Url = "";

  /**
   * @generated from field: stredono.AuthLevel MinAuthLevel = 7;
   */
  MinAuthLevel = AuthLevel.NONE;

  /**
   * @generated from field: double MinAmount = 8;
   */
  MinAmount = 0;

  /**
   * @generated from field: stredono.Currency Currency = 9;
   */
  Currency = Currency.UNKNOWN;

  /**
   * @generated from field: string VoiceBasic = 10;
   */
  VoiceBasic = "";

  /**
   * @generated from field: string VoicePlus = 11;
   */
  VoicePlus = "";

  /**
   * @generated from field: stredono.Tier VoiceTier = 12;
   */
  VoiceTier = Tier.BASIC;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "PictureUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "MinAuthLevel", kind: "enum", T: proto3.getEnumType(AuthLevel) },
    { no: 8, name: "MinAmount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "Currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 10, name: "VoiceBasic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "VoicePlus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "VoiceTier", kind: "enum", T: proto3.getEnumType(Tier) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message stredono.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: stredono.EventType Type = 2;
   */
  Type = EventType.TIP;

  /**
   * @generated from field: map<string, string> Data = 3;
   */
  Data: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Type", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 3, name: "Data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message stredono.UsersAlerts
 */
export class UsersAlerts extends Message<UsersAlerts> {
  /**
   * @generated from field: repeated stredono.Alert Alerts = 1;
   */
  Alerts: Alert[] = [];

  constructor(data?: PartialMessage<UsersAlerts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.UsersAlerts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Alerts", kind: "message", T: Alert, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersAlerts {
    return new UsersAlerts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersAlerts {
    return new UsersAlerts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersAlerts {
    return new UsersAlerts().fromJsonString(jsonString, options);
  }

  static equals(a: UsersAlerts | PlainMessage<UsersAlerts> | undefined, b: UsersAlerts | PlainMessage<UsersAlerts> | undefined): boolean {
    return proto3.util.equals(UsersAlerts, a, b);
  }
}

/**
 * @generated from message stredono.Alert
 */
export class Alert extends Message<Alert> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: stredono.EventType EventType = 2;
   */
  EventType = EventType.TIP;

  /**
   * @generated from field: string Message = 3;
   */
  Message = "";

  /**
   * @generated from field: double Min = 4;
   */
  Min = 0;

  /**
   * @generated from field: double Max = 5;
   */
  Max = 0;

  /**
   * @generated from field: string GifUrl = 6;
   */
  GifUrl = "";

  /**
   * @generated from field: string SoundUrl = 7;
   */
  SoundUrl = "";

  /**
   * @generated from field: stredono.AnimationType Animation = 8;
   */
  Animation = AnimationType.PULSE;

  /**
   * @generated from field: stredono.Speed AnimationSpeed = 9;
   */
  AnimationSpeed = Speed.OFF;

  /**
   * @generated from field: string TextColor = 10;
   */
  TextColor = "";

  /**
   * @generated from field: string AccentColor = 11;
   */
  AccentColor = "";

  /**
   * @generated from field: stredono.Alignment Alignment = 12;
   */
  Alignment = Alignment.START;

  /**
   * @generated from field: stredono.Position TextPosition = 13;
   */
  TextPosition = Position.TOP;

  constructor(data?: PartialMessage<Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "EventType", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 3, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "Max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "GifUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "SoundUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "Animation", kind: "enum", T: proto3.getEnumType(AnimationType) },
    { no: 9, name: "AnimationSpeed", kind: "enum", T: proto3.getEnumType(Speed) },
    { no: 10, name: "TextColor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "AccentColor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "Alignment", kind: "enum", T: proto3.getEnumType(Alignment) },
    { no: 13, name: "TextPosition", kind: "enum", T: proto3.getEnumType(Position) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert {
    return new Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJsonString(jsonString, options);
  }

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean {
    return proto3.util.equals(Alert, a, b);
  }
}

/**
 * @generated from message stredono.Token
 */
export class Token extends Message<Token> {
  /**
   * @generated from field: string Access = 1;
   */
  Access = "";

  /**
   * @generated from field: string Refresh = 2;
   */
  Refresh = "";

  constructor(data?: PartialMessage<Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Access", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Refresh", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {
    return new Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJsonString(jsonString, options);
  }

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {
    return proto3.util.equals(Token, a, b);
  }
}

/**
 * @generated from message stredono.TwitchReward
 */
export class TwitchReward extends Message<TwitchReward> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: int64 Cost = 3;
   */
  Cost = protoInt64.zero;

  /**
   * @generated from field: bool IsEnabled = 4;
   */
  IsEnabled = false;

  constructor(data?: PartialMessage<TwitchReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TwitchReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Cost", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "IsEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwitchReward {
    return new TwitchReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwitchReward {
    return new TwitchReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwitchReward {
    return new TwitchReward().fromJsonString(jsonString, options);
  }

  static equals(a: TwitchReward | PlainMessage<TwitchReward> | undefined, b: TwitchReward | PlainMessage<TwitchReward> | undefined): boolean {
    return proto3.util.equals(TwitchReward, a, b);
  }
}

/**
 * @generated from message stredono.TwitchUser
 */
export class TwitchUser extends Message<TwitchUser> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string DisplayName = 2;
   */
  DisplayName = "";

  /**
   * @generated from field: string Login = 3;
   */
  Login = "";

  /**
   * @generated from field: string AvatarUrl = 4;
   */
  AvatarUrl = "";

  /**
   * @generated from field: string Description = 5;
   */
  Description = "";

  /**
   * @generated from field: int64 CreationTimestamp = 6;
   */
  CreationTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<TwitchUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TwitchUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "AvatarUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "CreationTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwitchUser {
    return new TwitchUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwitchUser {
    return new TwitchUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwitchUser {
    return new TwitchUser().fromJsonString(jsonString, options);
  }

  static equals(a: TwitchUser | PlainMessage<TwitchUser> | undefined, b: TwitchUser | PlainMessage<TwitchUser> | undefined): boolean {
    return proto3.util.equals(TwitchUser, a, b);
  }
}

/**
 * @generated from message stredono.SpeechRequest
 */
export class SpeechRequest extends Message<SpeechRequest> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string Uid = 2;
   */
  Uid = "";

  /**
   * @generated from field: string Text = 3;
   */
  Text = "";

  /**
   * @generated from field: string VoiceIdBasic = 4;
   */
  VoiceIdBasic = "";

  /**
   * @generated from field: string VoiceIdPlus = 5;
   */
  VoiceIdPlus = "";

  constructor(data?: PartialMessage<SpeechRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.SpeechRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "VoiceIdBasic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "VoiceIdPlus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeechRequest {
    return new SpeechRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeechRequest {
    return new SpeechRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeechRequest {
    return new SpeechRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpeechRequest | PlainMessage<SpeechRequest> | undefined, b: SpeechRequest | PlainMessage<SpeechRequest> | undefined): boolean {
    return proto3.util.equals(SpeechRequest, a, b);
  }
}

/**
 * @generated from message stredono.Voice
 */
export class Voice extends Message<Voice> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: stredono.Gender Gender = 3;
   */
  Gender = Gender.NOT_SPECIFIED;

  /**
   * @generated from field: stredono.Tier Tier = 4;
   */
  Tier = Tier.BASIC;

  /**
   * @generated from field: string Provider = 5;
   */
  Provider = "";

  /**
   * @generated from field: repeated string Languages = 7;
   */
  Languages: string[] = [];

  /**
   * @generated from field: string SampleUrl = 8;
   */
  SampleUrl = "";

  constructor(data?: PartialMessage<Voice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Voice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 4, name: "Tier", kind: "enum", T: proto3.getEnumType(Tier) },
    { no: 5, name: "Provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "SampleUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Voice {
    return new Voice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Voice {
    return new Voice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Voice {
    return new Voice().fromJsonString(jsonString, options);
  }

  static equals(a: Voice | PlainMessage<Voice> | undefined, b: Voice | PlainMessage<Voice> | undefined): boolean {
    return proto3.util.equals(Voice, a, b);
  }
}

/**
 * @generated from message stredono.Voices
 */
export class Voices extends Message<Voices> {
  /**
   * @generated from field: repeated stredono.Voice Voices = 1;
   */
  Voices: Voice[] = [];

  constructor(data?: PartialMessage<Voices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Voices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Voices", kind: "message", T: Voice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Voices {
    return new Voices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Voices {
    return new Voices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Voices {
    return new Voices().fromJsonString(jsonString, options);
  }

  static equals(a: Voices | PlainMessage<Voices> | undefined, b: Voices | PlainMessage<Voices> | undefined): boolean {
    return proto3.util.equals(Voices, a, b);
  }
}

/**
 * @generated from message stredono.TTSKey
 */
export class TTSKey extends Message<TTSKey> {
  /**
   * @generated from field: string Key = 1;
   */
  Key = "";

  /**
   * @generated from field: int32 CharactersLeft = 2;
   */
  CharactersLeft = 0;

  /**
   * @generated from field: int32 CharactersLimit = 3;
   */
  CharactersLimit = 0;

  /**
   * @generated from field: int64 ResetTimestamp = 4;
   */
  ResetTimestamp = protoInt64.zero;

  /**
   * @generated from field: int64 LastUsed = 5;
   */
  LastUsed = protoInt64.zero;

  constructor(data?: PartialMessage<TTSKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "CharactersLeft", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "CharactersLimit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ResetTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "LastUsed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSKey {
    return new TTSKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSKey {
    return new TTSKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSKey {
    return new TTSKey().fromJsonString(jsonString, options);
  }

  static equals(a: TTSKey | PlainMessage<TTSKey> | undefined, b: TTSKey | PlainMessage<TTSKey> | undefined): boolean {
    return proto3.util.equals(TTSKey, a, b);
  }
}

/**
 * @generated from message stredono.TTSProvider
 */
export class TTSProvider extends Message<TTSProvider> {
  /**
   * @generated from field: int64 LastUpdated = 1;
   */
  LastUpdated = protoInt64.zero;

  /**
   * @generated from field: repeated stredono.Voice Voices = 2;
   */
  Voices: Voice[] = [];

  /**
   * @generated from field: repeated string Languages = 3;
   */
  Languages: string[] = [];

  constructor(data?: PartialMessage<TTSProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "LastUpdated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "Voices", kind: "message", T: Voice, repeated: true },
    { no: 3, name: "Languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSProvider {
    return new TTSProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSProvider {
    return new TTSProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSProvider {
    return new TTSProvider().fromJsonString(jsonString, options);
  }

  static equals(a: TTSProvider | PlainMessage<TTSProvider> | undefined, b: TTSProvider | PlainMessage<TTSProvider> | undefined): boolean {
    return proto3.util.equals(TTSProvider, a, b);
  }
}

