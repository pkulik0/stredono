// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/tts.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum stredono.Tier
 */
export enum Tier {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: PLUS = 1;
   */
  PLUS = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Tier)
proto3.util.setEnumType(Tier, "stredono.Tier", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "PLUS" },
]);

/**
 * @generated from enum stredono.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: NOT_SPECIFIED = 0;
   */
  NOT_SPECIFIED = 0,

  /**
   * @generated from enum value: MALE = 1;
   */
  MALE = 1,

  /**
   * @generated from enum value: FEMALE = 2;
   */
  FEMALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, "stredono.Gender", [
  { no: 0, name: "NOT_SPECIFIED" },
  { no: 1, name: "MALE" },
  { no: 2, name: "FEMALE" },
]);

/**
 * @generated from message stredono.SpeechRequest
 */
export class SpeechRequest extends Message<SpeechRequest> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string Uid = 2;
   */
  Uid = "";

  /**
   * @generated from field: string Text = 3;
   */
  Text = "";

  /**
   * @generated from field: string VoiceIdBasic = 4;
   */
  VoiceIdBasic = "";

  /**
   * @generated from field: string VoiceIdPlus = 5;
   */
  VoiceIdPlus = "";

  constructor(data?: PartialMessage<SpeechRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.SpeechRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "VoiceIdBasic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "VoiceIdPlus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeechRequest {
    return new SpeechRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeechRequest {
    return new SpeechRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeechRequest {
    return new SpeechRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpeechRequest | PlainMessage<SpeechRequest> | undefined, b: SpeechRequest | PlainMessage<SpeechRequest> | undefined): boolean {
    return proto3.util.equals(SpeechRequest, a, b);
  }
}

/**
 * @generated from message stredono.Voice
 */
export class Voice extends Message<Voice> {
  /**
   * @generated from field: string Id = 1;
   */
  Id = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: stredono.Gender Gender = 3;
   */
  Gender = Gender.NOT_SPECIFIED;

  /**
   * @generated from field: stredono.Tier Tier = 4;
   */
  Tier = Tier.BASIC;

  /**
   * @generated from field: string Provider = 5;
   */
  Provider = "";

  /**
   * @generated from field: repeated string Languages = 7;
   */
  Languages: string[] = [];

  /**
   * @generated from field: string SampleUrl = 8;
   */
  SampleUrl = "";

  constructor(data?: PartialMessage<Voice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Voice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 4, name: "Tier", kind: "enum", T: proto3.getEnumType(Tier) },
    { no: 5, name: "Provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "SampleUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Voice {
    return new Voice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Voice {
    return new Voice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Voice {
    return new Voice().fromJsonString(jsonString, options);
  }

  static equals(a: Voice | PlainMessage<Voice> | undefined, b: Voice | PlainMessage<Voice> | undefined): boolean {
    return proto3.util.equals(Voice, a, b);
  }
}

/**
 * @generated from message stredono.Voices
 */
export class Voices extends Message<Voices> {
  /**
   * @generated from field: repeated stredono.Voice Voices = 1;
   */
  Voices: Voice[] = [];

  constructor(data?: PartialMessage<Voices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Voices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Voices", kind: "message", T: Voice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Voices {
    return new Voices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Voices {
    return new Voices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Voices {
    return new Voices().fromJsonString(jsonString, options);
  }

  static equals(a: Voices | PlainMessage<Voices> | undefined, b: Voices | PlainMessage<Voices> | undefined): boolean {
    return proto3.util.equals(Voices, a, b);
  }
}

/**
 * @generated from message stredono.TTSKey
 */
export class TTSKey extends Message<TTSKey> {
  /**
   * @generated from field: string Key = 1;
   */
  Key = "";

  /**
   * @generated from field: int32 CharactersLeft = 2;
   */
  CharactersLeft = 0;

  /**
   * @generated from field: int32 CharactersLimit = 3;
   */
  CharactersLimit = 0;

  /**
   * @generated from field: int64 ResetTimestamp = 4;
   */
  ResetTimestamp = protoInt64.zero;

  /**
   * @generated from field: int64 LastUsed = 5;
   */
  LastUsed = protoInt64.zero;

  constructor(data?: PartialMessage<TTSKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "CharactersLeft", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "CharactersLimit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ResetTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "LastUsed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSKey {
    return new TTSKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSKey {
    return new TTSKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSKey {
    return new TTSKey().fromJsonString(jsonString, options);
  }

  static equals(a: TTSKey | PlainMessage<TTSKey> | undefined, b: TTSKey | PlainMessage<TTSKey> | undefined): boolean {
    return proto3.util.equals(TTSKey, a, b);
  }
}

/**
 * @generated from message stredono.TTSProvider
 */
export class TTSProvider extends Message<TTSProvider> {
  /**
   * @generated from field: int64 LastUpdated = 1;
   */
  LastUpdated = protoInt64.zero;

  /**
   * @generated from field: repeated stredono.Voice Voices = 2;
   */
  Voices: Voice[] = [];

  /**
   * @generated from field: repeated string Languages = 3;
   */
  Languages: string[] = [];

  constructor(data?: PartialMessage<TTSProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "LastUpdated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "Voices", kind: "message", T: Voice, repeated: true },
    { no: 3, name: "Languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSProvider {
    return new TTSProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSProvider {
    return new TTSProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSProvider {
    return new TTSProvider().fromJsonString(jsonString, options);
  }

  static equals(a: TTSProvider | PlainMessage<TTSProvider> | undefined, b: TTSProvider | PlainMessage<TTSProvider> | undefined): boolean {
    return proto3.util.equals(TTSProvider, a, b);
  }
}

/**
 * @generated from message stredono.TTSSettings
 */
export class TTSSettings extends Message<TTSSettings> {
  /**
   * @generated from field: string BasicId = 1;
   */
  BasicId = "";

  /**
   * @generated from field: string PlusId = 2;
   */
  PlusId = "";

  /**
   * @generated from field: stredono.Tier Tier = 3;
   */
  Tier = Tier.BASIC;

  constructor(data?: PartialMessage<TTSSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "BasicId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "PlusId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Tier", kind: "enum", T: proto3.getEnumType(Tier) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSSettings {
    return new TTSSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSSettings {
    return new TTSSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSSettings {
    return new TTSSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TTSSettings | PlainMessage<TTSSettings> | undefined, b: TTSSettings | PlainMessage<TTSSettings> | undefined): boolean {
    return proto3.util.equals(TTSSettings, a, b);
  }
}

