// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/user_data.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TipSettings } from "./tip_settings_pb.js";
import { TTSSettings } from "./tts_settings_pb.js";
import { MediaRequest } from "./media_request_pb.js";

/**
 * @generated from message stredono.UserData
 */
export class UserData extends Message<UserData> {
  /**
   * @generated from field: stredono.TipSettings Tip = 1;
   */
  Tip?: TipSettings;

  /**
   * @generated from field: stredono.TTSSettings TTS = 2;
   */
  TTS?: TTSSettings;

  /**
   * @generated from field: stredono.MediaRequest Media = 3;
   */
  Media?: MediaRequest;

  /**
   * @generated from field: map<string, string> Commands = 4;
   */
  Commands: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.UserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Tip", kind: "message", T: TipSettings },
    { no: 2, name: "TTS", kind: "message", T: TTSSettings },
    { no: 3, name: "Media", kind: "message", T: MediaRequest },
    { no: 4, name: "Commands", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserData {
    return new UserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJsonString(jsonString, options);
  }

  static equals(a: UserData | PlainMessage<UserData> | undefined, b: UserData | PlainMessage<UserData> | undefined): boolean {
    return proto3.util.equals(UserData, a, b);
  }
}

