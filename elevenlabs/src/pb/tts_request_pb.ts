// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/tts_request.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message stredono.TTSRequest
 */
export class TTSRequest extends Message<TTSRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Uid = 2;
   */
  Uid = "";

  /**
   * @generated from field: string Text = 3;
   */
  Text = "";

  constructor(data?: PartialMessage<TTSRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TTSRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSRequest {
    return new TTSRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSRequest {
    return new TTSRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSRequest {
    return new TTSRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TTSRequest | PlainMessage<TTSRequest> | undefined, b: TTSRequest | PlainMessage<TTSRequest> | undefined): boolean {
    return proto3.util.equals(TTSRequest, a, b);
  }
}

