// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/bot_message.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message stredono.BotMessage
 */
export class BotMessage extends Message<BotMessage> {
  /**
   * @generated from field: string ChatID = 1;
   */
  ChatID = "";

  /**
   * @generated from field: string Message = 2;
   */
  Message = "";

  /**
   * @generated from oneof stredono.BotMessage.Data
   */
  Data: {
    /**
     * @generated from field: stredono.BotMessage.NormalData Normal = 3;
     */
    value: BotMessage_NormalData;
    case: "Normal";
  } | {
    /**
     * @generated from field: stredono.BotMessage.AnnouncementData Announcement = 4;
     */
    value: BotMessage_AnnouncementData;
    case: "Announcement";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BotMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.BotMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ChatID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Normal", kind: "message", T: BotMessage_NormalData, oneof: "Data" },
    { no: 4, name: "Announcement", kind: "message", T: BotMessage_AnnouncementData, oneof: "Data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotMessage {
    return new BotMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotMessage {
    return new BotMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotMessage {
    return new BotMessage().fromJsonString(jsonString, options);
  }

  static equals(a: BotMessage | PlainMessage<BotMessage> | undefined, b: BotMessage | PlainMessage<BotMessage> | undefined): boolean {
    return proto3.util.equals(BotMessage, a, b);
  }
}

/**
 * @generated from message stredono.BotMessage.NormalData
 */
export class BotMessage_NormalData extends Message<BotMessage_NormalData> {
  /**
   * @generated from field: string ReplyMessageID = 1;
   */
  ReplyMessageID = "";

  constructor(data?: PartialMessage<BotMessage_NormalData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.BotMessage.NormalData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ReplyMessageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotMessage_NormalData {
    return new BotMessage_NormalData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotMessage_NormalData {
    return new BotMessage_NormalData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotMessage_NormalData {
    return new BotMessage_NormalData().fromJsonString(jsonString, options);
  }

  static equals(a: BotMessage_NormalData | PlainMessage<BotMessage_NormalData> | undefined, b: BotMessage_NormalData | PlainMessage<BotMessage_NormalData> | undefined): boolean {
    return proto3.util.equals(BotMessage_NormalData, a, b);
  }
}

/**
 * @generated from message stredono.BotMessage.AnnouncementData
 */
export class BotMessage_AnnouncementData extends Message<BotMessage_AnnouncementData> {
  /**
   * @generated from field: stredono.BotMessage.AnnouncementData.AnnouncementColor Color = 1;
   */
  Color = BotMessage_AnnouncementData_AnnouncementColor.PRIMARY;

  constructor(data?: PartialMessage<BotMessage_AnnouncementData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.BotMessage.AnnouncementData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Color", kind: "enum", T: proto3.getEnumType(BotMessage_AnnouncementData_AnnouncementColor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotMessage_AnnouncementData {
    return new BotMessage_AnnouncementData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotMessage_AnnouncementData {
    return new BotMessage_AnnouncementData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotMessage_AnnouncementData {
    return new BotMessage_AnnouncementData().fromJsonString(jsonString, options);
  }

  static equals(a: BotMessage_AnnouncementData | PlainMessage<BotMessage_AnnouncementData> | undefined, b: BotMessage_AnnouncementData | PlainMessage<BotMessage_AnnouncementData> | undefined): boolean {
    return proto3.util.equals(BotMessage_AnnouncementData, a, b);
  }
}

/**
 * @generated from enum stredono.BotMessage.AnnouncementData.AnnouncementColor
 */
export enum BotMessage_AnnouncementData_AnnouncementColor {
  /**
   * @generated from enum value: PRIMARY = 0;
   */
  PRIMARY = 0,

  /**
   * @generated from enum value: BLUE = 1;
   */
  BLUE = 1,

  /**
   * @generated from enum value: GREEN = 2;
   */
  GREEN = 2,

  /**
   * @generated from enum value: ORANGE = 3;
   */
  ORANGE = 3,

  /**
   * @generated from enum value: PURPLE = 4;
   */
  PURPLE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(BotMessage_AnnouncementData_AnnouncementColor)
proto3.util.setEnumType(BotMessage_AnnouncementData_AnnouncementColor, "stredono.BotMessage.AnnouncementData.AnnouncementColor", [
  { no: 0, name: "PRIMARY" },
  { no: 1, name: "BLUE" },
  { no: 2, name: "GREEN" },
  { no: 3, name: "ORANGE" },
  { no: 4, name: "PURPLE" },
]);

