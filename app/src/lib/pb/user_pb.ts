// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/user.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum stredono.Currency
 */
export enum Currency {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: BITS = 1;
   */
  BITS = 1,

  /**
   * @generated from enum value: PLN = 2;
   */
  PLN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Currency)
proto3.util.setEnumType(Currency, "stredono.Currency", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "BITS" },
  { no: 2, name: "PLN" },
]);

/**
 * @generated from enum stredono.AlertType
 */
export enum AlertType {
  /**
   * @generated from enum value: DONATE = 0;
   */
  DONATE = 0,

  /**
   * @generated from enum value: FOLLOW = 1;
   */
  FOLLOW = 1,

  /**
   * @generated from enum value: SUBSCRIBE = 2;
   */
  SUBSCRIBE = 2,

  /**
   * @generated from enum value: SUBGIFT = 3;
   */
  SUBGIFT = 3,

  /**
   * @generated from enum value: RAID = 4;
   */
  RAID = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AlertType)
proto3.util.setEnumType(AlertType, "stredono.AlertType", [
  { no: 0, name: "DONATE" },
  { no: 1, name: "FOLLOW" },
  { no: 2, name: "SUBSCRIBE" },
  { no: 3, name: "SUBGIFT" },
  { no: 4, name: "RAID" },
]);

/**
 * @generated from enum stredono.TextToSpeechService
 */
export enum TextToSpeechService {
  /**
   * @generated from enum value: GOOGLE = 0;
   */
  GOOGLE = 0,

  /**
   * @generated from enum value: ELEVENLABS = 1;
   */
  ELEVENLABS = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TextToSpeechService)
proto3.util.setEnumType(TextToSpeechService, "stredono.TextToSpeechService", [
  { no: 0, name: "GOOGLE" },
  { no: 1, name: "ELEVENLABS" },
]);

/**
 * @generated from enum stredono.AnimationType
 */
export enum AnimationType {
  /**
   * @generated from enum value: SHAKE = 0;
   */
  SHAKE = 0,

  /**
   * @generated from enum value: BOUNCE = 1;
   */
  BOUNCE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AnimationType)
proto3.util.setEnumType(AnimationType, "stredono.AnimationType", [
  { no: 0, name: "SHAKE" },
  { no: 1, name: "BOUNCE" },
]);

/**
 * @generated from message stredono.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string uid = 2;
   */
  uid = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string avatarUrl = 5;
   */
  avatarUrl = "";

  /**
   * @generated from field: double minimumAmount = 6;
   */
  minimumAmount = 0;

  /**
   * @generated from field: stredono.Currency currency = 7;
   */
  currency = Currency.UNKNOWN;

  /**
   * @generated from field: repeated stredono.Alert alerts = 8;
   */
  alerts: Alert[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "avatarUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "minimumAmount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 8, name: "alerts", kind: "message", T: Alert, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message stredono.TextToSpeechSettings
 */
export class TextToSpeechSettings extends Message<TextToSpeechSettings> {
  /**
   * @generated from field: stredono.TextToSpeechService service = 1;
   */
  service = TextToSpeechService.GOOGLE;

  /**
   * @generated from field: string voice = 2;
   */
  voice = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  constructor(data?: PartialMessage<TextToSpeechSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TextToSpeechSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "enum", T: proto3.getEnumType(TextToSpeechService) },
    { no: 2, name: "voice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextToSpeechSettings {
    return new TextToSpeechSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextToSpeechSettings {
    return new TextToSpeechSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextToSpeechSettings {
    return new TextToSpeechSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TextToSpeechSettings | PlainMessage<TextToSpeechSettings> | undefined, b: TextToSpeechSettings | PlainMessage<TextToSpeechSettings> | undefined): boolean {
    return proto3.util.equals(TextToSpeechSettings, a, b);
  }
}

/**
 * @generated from message stredono.AmountTrigger
 */
export class AmountTrigger extends Message<AmountTrigger> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<AmountTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.AmountTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmountTrigger {
    return new AmountTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmountTrigger {
    return new AmountTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmountTrigger {
    return new AmountTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: AmountTrigger | PlainMessage<AmountTrigger> | undefined, b: AmountTrigger | PlainMessage<AmountTrigger> | undefined): boolean {
    return proto3.util.equals(AmountTrigger, a, b);
  }
}

/**
 * @generated from message stredono.Alert
 */
export class Alert extends Message<Alert> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: stredono.AlertType type = 2;
   */
  type = AlertType.DONATE;

  /**
   * @generated from field: optional stredono.AmountTrigger amountTrigger = 3;
   */
  amountTrigger?: AmountTrigger;

  /**
   * @generated from field: string template = 4;
   */
  template = "";

  /**
   * @generated from field: stredono.AlertStyle style = 5;
   */
  style?: AlertStyle;

  /**
   * @generated from field: optional stredono.TextToSpeechSettings ttsSettings = 6;
   */
  ttsSettings?: TextToSpeechSettings;

  constructor(data?: PartialMessage<Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AlertType) },
    { no: 3, name: "amountTrigger", kind: "message", T: AmountTrigger, opt: true },
    { no: 4, name: "template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "style", kind: "message", T: AlertStyle },
    { no: 6, name: "ttsSettings", kind: "message", T: TextToSpeechSettings, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert {
    return new Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJsonString(jsonString, options);
  }

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean {
    return proto3.util.equals(Alert, a, b);
  }
}

/**
 * @generated from message stredono.AlertStyle
 */
export class AlertStyle extends Message<AlertStyle> {
  /**
   * @generated from field: string gifUrl = 1;
   */
  gifUrl = "";

  /**
   * @generated from field: string soundUrl = 2;
   */
  soundUrl = "";

  /**
   * @generated from field: stredono.AnimationType animation = 3;
   */
  animation = AnimationType.SHAKE;

  /**
   * @generated from field: string textColor = 4;
   */
  textColor = "";

  /**
   * @generated from field: string accentColor = 5;
   */
  accentColor = "";

  constructor(data?: PartialMessage<AlertStyle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.AlertStyle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gifUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "soundUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "animation", kind: "enum", T: proto3.getEnumType(AnimationType) },
    { no: 4, name: "textColor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "accentColor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertStyle {
    return new AlertStyle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertStyle {
    return new AlertStyle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertStyle {
    return new AlertStyle().fromJsonString(jsonString, options);
  }

  static equals(a: AlertStyle | PlainMessage<AlertStyle> | undefined, b: AlertStyle | PlainMessage<AlertStyle> | undefined): boolean {
    return proto3.util.equals(AlertStyle, a, b);
  }
}

/**
 * @generated from message stredono.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: repeated string users = 1;
   */
  users: string[] = [];

  /**
   * @generated from field: repeated double amounts = 2;
   */
  amounts: number[] = [];

  /**
   * @generated from field: optional string currency = 3;
   */
  currency?: string;

  /**
   * @generated from field: optional string message = 4;
   */
  message?: string;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "amounts", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 3, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

