// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/tip_settings.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Currency } from "./enums_pb.js";

/**
 * @generated from enum stredono.AuthLevel
 */
export enum AuthLevel {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: EMAIL = 1;
   */
  EMAIL = 1,

  /**
   * @generated from enum value: OIDC = 2;
   */
  OIDC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthLevel)
proto3.util.setEnumType(AuthLevel, "stredono.AuthLevel", [
  { no: 0, name: "NONE" },
  { no: 1, name: "EMAIL" },
  { no: 2, name: "OIDC" },
]);

/**
 * @generated from message stredono.TipSettings
 */
export class TipSettings extends Message<TipSettings> {
  /**
   * @generated from field: double MinAmount = 1;
   */
  MinAmount = 0;

  /**
   * @generated from field: stredono.AuthLevel MinAuthLevel = 2;
   */
  MinAuthLevel = AuthLevel.NONE;

  /**
   * @generated from field: stredono.Currency Currency = 3;
   */
  Currency = Currency.UNKNOWN;

  constructor(data?: PartialMessage<TipSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TipSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MinAmount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "MinAuthLevel", kind: "enum", T: proto3.getEnumType(AuthLevel) },
    { no: 3, name: "Currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TipSettings {
    return new TipSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TipSettings {
    return new TipSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TipSettings {
    return new TipSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TipSettings | PlainMessage<TipSettings> | undefined, b: TipSettings | PlainMessage<TipSettings> | undefined): boolean {
    return proto3.util.equals(TipSettings, a, b);
  }
}

