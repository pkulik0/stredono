// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/twitch.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message stredono.TwitchReward
 */
export class TwitchReward extends Message<TwitchReward> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int64 cost = 3;
   */
  cost = protoInt64.zero;

  /**
   * @generated from field: bool isEnabled = 4;
   */
  isEnabled = false;

  constructor(data?: PartialMessage<TwitchReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TwitchReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cost", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "isEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwitchReward {
    return new TwitchReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwitchReward {
    return new TwitchReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwitchReward {
    return new TwitchReward().fromJsonString(jsonString, options);
  }

  static equals(a: TwitchReward | PlainMessage<TwitchReward> | undefined, b: TwitchReward | PlainMessage<TwitchReward> | undefined): boolean {
    return proto3.util.equals(TwitchReward, a, b);
  }
}

/**
 * @generated from message stredono.TwitchUser
 */
export class TwitchUser extends Message<TwitchUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string displayName = 2;
   */
  displayName = "";

  /**
   * @generated from field: string login = 3;
   */
  login = "";

  /**
   * @generated from field: string avatarUrl = 4;
   */
  avatarUrl = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: int64 creationTimestamp = 6;
   */
  creationTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<TwitchUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.TwitchUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "displayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "avatarUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creationTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwitchUser {
    return new TwitchUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwitchUser {
    return new TwitchUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwitchUser {
    return new TwitchUser().fromJsonString(jsonString, options);
  }

  static equals(a: TwitchUser | PlainMessage<TwitchUser> | undefined, b: TwitchUser | PlainMessage<TwitchUser> | undefined): boolean {
    return proto3.util.equals(TwitchUser, a, b);
  }
}

