// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file pb/media_request.proto (package stredono, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Role } from "./chat_role_pb.js";

/**
 * @generated from message stredono.MediaRequest
 */
export class MediaRequest extends Message<MediaRequest> {
  /**
   * @generated from field: bool IsEnabled = 1;
   */
  IsEnabled = false;

  /**
   * @generated from field: bool IsPlaying = 2;
   */
  IsPlaying = false;

  /**
   * @generated from field: stredono.MediaRequestSettings Settings = 3;
   */
  Settings?: MediaRequestSettings;

  /**
   * @generated from field: repeated stredono.MediaRequest.QueueItem Queue = 4;
   */
  Queue: MediaRequest_QueueItem[] = [];

  /**
   * @generated from field: int32 CurrentQueueIndex = 5;
   */
  CurrentQueueIndex = 0;

  /**
   * @generated from field: bool RequireApproval = 6;
   */
  RequireApproval = false;

  constructor(data?: PartialMessage<MediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.MediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "IsEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "IsPlaying", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "Settings", kind: "message", T: MediaRequestSettings },
    { no: 4, name: "Queue", kind: "message", T: MediaRequest_QueueItem, repeated: true },
    { no: 5, name: "CurrentQueueIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "RequireApproval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaRequest {
    return new MediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaRequest {
    return new MediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaRequest {
    return new MediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MediaRequest | PlainMessage<MediaRequest> | undefined, b: MediaRequest | PlainMessage<MediaRequest> | undefined): boolean {
    return proto3.util.equals(MediaRequest, a, b);
  }
}

/**
 * @generated from message stredono.MediaRequest.QueueItem
 */
export class MediaRequest_QueueItem extends Message<MediaRequest_QueueItem> {
  /**
   * @generated from field: string URL = 1;
   */
  URL = "";

  /**
   * @generated from field: string RequesterID = 2;
   */
  RequesterID = "";

  /**
   * @generated from field: string RequesterName = 3;
   */
  RequesterName = "";

  /**
   * @generated from field: string RequesterProvider = 4;
   */
  RequesterProvider = "";

  /**
   * @generated from field: int64 Timestamp = 5;
   */
  Timestamp = protoInt64.zero;

  /**
   * @generated from field: bool IsApproved = 6;
   */
  IsApproved = false;

  /**
   * @generated from field: int32 Progress = 7;
   */
  Progress = 0;

  constructor(data?: PartialMessage<MediaRequest_QueueItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.MediaRequest.QueueItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "URL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "RequesterID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "RequesterName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "RequesterProvider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "IsApproved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "Progress", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaRequest_QueueItem {
    return new MediaRequest_QueueItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaRequest_QueueItem {
    return new MediaRequest_QueueItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaRequest_QueueItem {
    return new MediaRequest_QueueItem().fromJsonString(jsonString, options);
  }

  static equals(a: MediaRequest_QueueItem | PlainMessage<MediaRequest_QueueItem> | undefined, b: MediaRequest_QueueItem | PlainMessage<MediaRequest_QueueItem> | undefined): boolean {
    return proto3.util.equals(MediaRequest_QueueItem, a, b);
  }
}

/**
 * @generated from message stredono.MediaRequestSettings
 */
export class MediaRequestSettings extends Message<MediaRequestSettings> {
  /**
   * @generated from field: stredono.Role MinRole = 1;
   */
  MinRole = Role.NORMAL;

  /**
   * @generated from field: int32 MinViews = 2;
   */
  MinViews = 0;

  /**
   * @generated from field: int32 MinLikes = 3;
   */
  MinLikes = 0;

  /**
   * @generated from field: bool RequireApproval = 4;
   */
  RequireApproval = false;

  constructor(data?: PartialMessage<MediaRequestSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stredono.MediaRequestSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MinRole", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 2, name: "MinViews", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "MinLikes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "RequireApproval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaRequestSettings {
    return new MediaRequestSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaRequestSettings {
    return new MediaRequestSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaRequestSettings {
    return new MediaRequestSettings().fromJsonString(jsonString, options);
  }

  static equals(a: MediaRequestSettings | PlainMessage<MediaRequestSettings> | undefined, b: MediaRequestSettings | PlainMessage<MediaRequestSettings> | undefined): boolean {
    return proto3.util.equals(MediaRequestSettings, a, b);
  }
}

