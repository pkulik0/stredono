// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	helix "github.com/nicklaw5/helix/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockHelixClient is an autogenerated mock type for the HelixClient type
type MockHelixClient struct {
	mock.Mock
}

type MockHelixClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHelixClient) EXPECT() *MockHelixClient_Expecter {
	return &MockHelixClient_Expecter{mock: &_m.Mock}
}

// AddChannelModerator provides a mock function with given fields: params
func (_m *MockHelixClient) AddChannelModerator(params *helix.AddChannelModeratorParams) (*helix.AddChannelModeratorResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelModerator")
	}

	var r0 *helix.AddChannelModeratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.AddChannelModeratorParams) (*helix.AddChannelModeratorResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.AddChannelModeratorParams) *helix.AddChannelModeratorResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.AddChannelModeratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.AddChannelModeratorParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_AddChannelModerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannelModerator'
type MockHelixClient_AddChannelModerator_Call struct {
	*mock.Call
}

// AddChannelModerator is a helper method to define mock.On call
//   - params *helix.AddChannelModeratorParams
func (_e *MockHelixClient_Expecter) AddChannelModerator(params interface{}) *MockHelixClient_AddChannelModerator_Call {
	return &MockHelixClient_AddChannelModerator_Call{Call: _e.mock.On("AddChannelModerator", params)}
}

func (_c *MockHelixClient_AddChannelModerator_Call) Run(run func(params *helix.AddChannelModeratorParams)) *MockHelixClient_AddChannelModerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.AddChannelModeratorParams))
	})
	return _c
}

func (_c *MockHelixClient_AddChannelModerator_Call) Return(_a0 *helix.AddChannelModeratorResponse, _a1 error) *MockHelixClient_AddChannelModerator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_AddChannelModerator_Call) RunAndReturn(run func(*helix.AddChannelModeratorParams) (*helix.AddChannelModeratorResponse, error)) *MockHelixClient_AddChannelModerator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSubSubscription provides a mock function with given fields: payload
func (_m *MockHelixClient) CreateEventSubSubscription(payload *helix.EventSubSubscription) (*helix.EventSubSubscriptionsResponse, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSubSubscription")
	}

	var r0 *helix.EventSubSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.EventSubSubscription) (*helix.EventSubSubscriptionsResponse, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*helix.EventSubSubscription) *helix.EventSubSubscriptionsResponse); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.EventSubSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.EventSubSubscription) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_CreateEventSubSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSubSubscription'
type MockHelixClient_CreateEventSubSubscription_Call struct {
	*mock.Call
}

// CreateEventSubSubscription is a helper method to define mock.On call
//   - payload *helix.EventSubSubscription
func (_e *MockHelixClient_Expecter) CreateEventSubSubscription(payload interface{}) *MockHelixClient_CreateEventSubSubscription_Call {
	return &MockHelixClient_CreateEventSubSubscription_Call{Call: _e.mock.On("CreateEventSubSubscription", payload)}
}

func (_c *MockHelixClient_CreateEventSubSubscription_Call) Run(run func(payload *helix.EventSubSubscription)) *MockHelixClient_CreateEventSubSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.EventSubSubscription))
	})
	return _c
}

func (_c *MockHelixClient_CreateEventSubSubscription_Call) Return(_a0 *helix.EventSubSubscriptionsResponse, _a1 error) *MockHelixClient_CreateEventSubSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_CreateEventSubSubscription_Call) RunAndReturn(run func(*helix.EventSubSubscription) (*helix.EventSubSubscriptionsResponse, error)) *MockHelixClient_CreateEventSubSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// EditChannelInformation provides a mock function with given fields: params
func (_m *MockHelixClient) EditChannelInformation(params *helix.EditChannelInformationParams) (*helix.EditChannelInformationResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for EditChannelInformation")
	}

	var r0 *helix.EditChannelInformationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.EditChannelInformationParams) (*helix.EditChannelInformationResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.EditChannelInformationParams) *helix.EditChannelInformationResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.EditChannelInformationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.EditChannelInformationParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_EditChannelInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditChannelInformation'
type MockHelixClient_EditChannelInformation_Call struct {
	*mock.Call
}

// EditChannelInformation is a helper method to define mock.On call
//   - params *helix.EditChannelInformationParams
func (_e *MockHelixClient_Expecter) EditChannelInformation(params interface{}) *MockHelixClient_EditChannelInformation_Call {
	return &MockHelixClient_EditChannelInformation_Call{Call: _e.mock.On("EditChannelInformation", params)}
}

func (_c *MockHelixClient_EditChannelInformation_Call) Run(run func(params *helix.EditChannelInformationParams)) *MockHelixClient_EditChannelInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.EditChannelInformationParams))
	})
	return _c
}

func (_c *MockHelixClient_EditChannelInformation_Call) Return(_a0 *helix.EditChannelInformationResponse, _a1 error) *MockHelixClient_EditChannelInformation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_EditChannelInformation_Call) RunAndReturn(run func(*helix.EditChannelInformationParams) (*helix.EditChannelInformationResponse, error)) *MockHelixClient_EditChannelInformation_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationURL provides a mock function with given fields: params
func (_m *MockHelixClient) GetAuthorizationURL(params *helix.AuthorizationURLParams) string {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*helix.AuthorizationURLParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHelixClient_GetAuthorizationURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationURL'
type MockHelixClient_GetAuthorizationURL_Call struct {
	*mock.Call
}

// GetAuthorizationURL is a helper method to define mock.On call
//   - params *helix.AuthorizationURLParams
func (_e *MockHelixClient_Expecter) GetAuthorizationURL(params interface{}) *MockHelixClient_GetAuthorizationURL_Call {
	return &MockHelixClient_GetAuthorizationURL_Call{Call: _e.mock.On("GetAuthorizationURL", params)}
}

func (_c *MockHelixClient_GetAuthorizationURL_Call) Run(run func(params *helix.AuthorizationURLParams)) *MockHelixClient_GetAuthorizationURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.AuthorizationURLParams))
	})
	return _c
}

func (_c *MockHelixClient_GetAuthorizationURL_Call) Return(_a0 string) *MockHelixClient_GetAuthorizationURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHelixClient_GetAuthorizationURL_Call) RunAndReturn(run func(*helix.AuthorizationURLParams) string) *MockHelixClient_GetAuthorizationURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSubSubscriptions provides a mock function with given fields: params
func (_m *MockHelixClient) GetEventSubSubscriptions(params *helix.EventSubSubscriptionsParams) (*helix.EventSubSubscriptionsResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetEventSubSubscriptions")
	}

	var r0 *helix.EventSubSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.EventSubSubscriptionsParams) (*helix.EventSubSubscriptionsResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.EventSubSubscriptionsParams) *helix.EventSubSubscriptionsResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.EventSubSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.EventSubSubscriptionsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_GetEventSubSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSubSubscriptions'
type MockHelixClient_GetEventSubSubscriptions_Call struct {
	*mock.Call
}

// GetEventSubSubscriptions is a helper method to define mock.On call
//   - params *helix.EventSubSubscriptionsParams
func (_e *MockHelixClient_Expecter) GetEventSubSubscriptions(params interface{}) *MockHelixClient_GetEventSubSubscriptions_Call {
	return &MockHelixClient_GetEventSubSubscriptions_Call{Call: _e.mock.On("GetEventSubSubscriptions", params)}
}

func (_c *MockHelixClient_GetEventSubSubscriptions_Call) Run(run func(params *helix.EventSubSubscriptionsParams)) *MockHelixClient_GetEventSubSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.EventSubSubscriptionsParams))
	})
	return _c
}

func (_c *MockHelixClient_GetEventSubSubscriptions_Call) Return(_a0 *helix.EventSubSubscriptionsResponse, _a1 error) *MockHelixClient_GetEventSubSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_GetEventSubSubscriptions_Call) RunAndReturn(run func(*helix.EventSubSubscriptionsParams) (*helix.EventSubSubscriptionsResponse, error)) *MockHelixClient_GetEventSubSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetModerators provides a mock function with given fields: params
func (_m *MockHelixClient) GetModerators(params *helix.GetModeratorsParams) (*helix.ModeratorsResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetModerators")
	}

	var r0 *helix.ModeratorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.GetModeratorsParams) (*helix.ModeratorsResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.GetModeratorsParams) *helix.ModeratorsResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.ModeratorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.GetModeratorsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_GetModerators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModerators'
type MockHelixClient_GetModerators_Call struct {
	*mock.Call
}

// GetModerators is a helper method to define mock.On call
//   - params *helix.GetModeratorsParams
func (_e *MockHelixClient_Expecter) GetModerators(params interface{}) *MockHelixClient_GetModerators_Call {
	return &MockHelixClient_GetModerators_Call{Call: _e.mock.On("GetModerators", params)}
}

func (_c *MockHelixClient_GetModerators_Call) Run(run func(params *helix.GetModeratorsParams)) *MockHelixClient_GetModerators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.GetModeratorsParams))
	})
	return _c
}

func (_c *MockHelixClient_GetModerators_Call) Return(_a0 *helix.ModeratorsResponse, _a1 error) *MockHelixClient_GetModerators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_GetModerators_Call) RunAndReturn(run func(*helix.GetModeratorsParams) (*helix.ModeratorsResponse, error)) *MockHelixClient_GetModerators_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: params
func (_m *MockHelixClient) GetUsers(params *helix.UsersParams) (*helix.UsersResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *helix.UsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.UsersParams) (*helix.UsersResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.UsersParams) *helix.UsersResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.UsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.UsersParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockHelixClient_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - params *helix.UsersParams
func (_e *MockHelixClient_Expecter) GetUsers(params interface{}) *MockHelixClient_GetUsers_Call {
	return &MockHelixClient_GetUsers_Call{Call: _e.mock.On("GetUsers", params)}
}

func (_c *MockHelixClient_GetUsers_Call) Run(run func(params *helix.UsersParams)) *MockHelixClient_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.UsersParams))
	})
	return _c
}

func (_c *MockHelixClient_GetUsers_Call) Return(_a0 *helix.UsersResponse, _a1 error) *MockHelixClient_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_GetUsers_Call) RunAndReturn(run func(*helix.UsersParams) (*helix.UsersResponse, error)) *MockHelixClient_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEventSubSubscription provides a mock function with given fields: id
func (_m *MockHelixClient) RemoveEventSubSubscription(id string) (*helix.RemoveEventSubSubscriptionParamsResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEventSubSubscription")
	}

	var r0 *helix.RemoveEventSubSubscriptionParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*helix.RemoveEventSubSubscriptionParamsResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *helix.RemoveEventSubSubscriptionParamsResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.RemoveEventSubSubscriptionParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_RemoveEventSubSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEventSubSubscription'
type MockHelixClient_RemoveEventSubSubscription_Call struct {
	*mock.Call
}

// RemoveEventSubSubscription is a helper method to define mock.On call
//   - id string
func (_e *MockHelixClient_Expecter) RemoveEventSubSubscription(id interface{}) *MockHelixClient_RemoveEventSubSubscription_Call {
	return &MockHelixClient_RemoveEventSubSubscription_Call{Call: _e.mock.On("RemoveEventSubSubscription", id)}
}

func (_c *MockHelixClient_RemoveEventSubSubscription_Call) Run(run func(id string)) *MockHelixClient_RemoveEventSubSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHelixClient_RemoveEventSubSubscription_Call) Return(_a0 *helix.RemoveEventSubSubscriptionParamsResponse, _a1 error) *MockHelixClient_RemoveEventSubSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_RemoveEventSubSubscription_Call) RunAndReturn(run func(string) (*helix.RemoveEventSubSubscriptionParamsResponse, error)) *MockHelixClient_RemoveEventSubSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAppAccessToken provides a mock function with given fields: scopes
func (_m *MockHelixClient) RequestAppAccessToken(scopes []string) (*helix.AppAccessTokenResponse, error) {
	ret := _m.Called(scopes)

	if len(ret) == 0 {
		panic("no return value specified for RequestAppAccessToken")
	}

	var r0 *helix.AppAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*helix.AppAccessTokenResponse, error)); ok {
		return rf(scopes)
	}
	if rf, ok := ret.Get(0).(func([]string) *helix.AppAccessTokenResponse); ok {
		r0 = rf(scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.AppAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_RequestAppAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAppAccessToken'
type MockHelixClient_RequestAppAccessToken_Call struct {
	*mock.Call
}

// RequestAppAccessToken is a helper method to define mock.On call
//   - scopes []string
func (_e *MockHelixClient_Expecter) RequestAppAccessToken(scopes interface{}) *MockHelixClient_RequestAppAccessToken_Call {
	return &MockHelixClient_RequestAppAccessToken_Call{Call: _e.mock.On("RequestAppAccessToken", scopes)}
}

func (_c *MockHelixClient_RequestAppAccessToken_Call) Run(run func(scopes []string)) *MockHelixClient_RequestAppAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockHelixClient_RequestAppAccessToken_Call) Return(_a0 *helix.AppAccessTokenResponse, _a1 error) *MockHelixClient_RequestAppAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_RequestAppAccessToken_Call) RunAndReturn(run func([]string) (*helix.AppAccessTokenResponse, error)) *MockHelixClient_RequestAppAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RequestUserAccessToken provides a mock function with given fields: code
func (_m *MockHelixClient) RequestUserAccessToken(code string) (*helix.UserAccessTokenResponse, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for RequestUserAccessToken")
	}

	var r0 *helix.UserAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*helix.UserAccessTokenResponse, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *helix.UserAccessTokenResponse); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.UserAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_RequestUserAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestUserAccessToken'
type MockHelixClient_RequestUserAccessToken_Call struct {
	*mock.Call
}

// RequestUserAccessToken is a helper method to define mock.On call
//   - code string
func (_e *MockHelixClient_Expecter) RequestUserAccessToken(code interface{}) *MockHelixClient_RequestUserAccessToken_Call {
	return &MockHelixClient_RequestUserAccessToken_Call{Call: _e.mock.On("RequestUserAccessToken", code)}
}

func (_c *MockHelixClient_RequestUserAccessToken_Call) Run(run func(code string)) *MockHelixClient_RequestUserAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHelixClient_RequestUserAccessToken_Call) Return(_a0 *helix.UserAccessTokenResponse, _a1 error) *MockHelixClient_RequestUserAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_RequestUserAccessToken_Call) RunAndReturn(run func(string) (*helix.UserAccessTokenResponse, error)) *MockHelixClient_RequestUserAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatAnnouncement provides a mock function with given fields: params
func (_m *MockHelixClient) SendChatAnnouncement(params *helix.SendChatAnnouncementParams) (*helix.SendChatAnnouncementResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SendChatAnnouncement")
	}

	var r0 *helix.SendChatAnnouncementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.SendChatAnnouncementParams) (*helix.SendChatAnnouncementResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.SendChatAnnouncementParams) *helix.SendChatAnnouncementResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.SendChatAnnouncementResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.SendChatAnnouncementParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_SendChatAnnouncement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatAnnouncement'
type MockHelixClient_SendChatAnnouncement_Call struct {
	*mock.Call
}

// SendChatAnnouncement is a helper method to define mock.On call
//   - params *helix.SendChatAnnouncementParams
func (_e *MockHelixClient_Expecter) SendChatAnnouncement(params interface{}) *MockHelixClient_SendChatAnnouncement_Call {
	return &MockHelixClient_SendChatAnnouncement_Call{Call: _e.mock.On("SendChatAnnouncement", params)}
}

func (_c *MockHelixClient_SendChatAnnouncement_Call) Run(run func(params *helix.SendChatAnnouncementParams)) *MockHelixClient_SendChatAnnouncement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.SendChatAnnouncementParams))
	})
	return _c
}

func (_c *MockHelixClient_SendChatAnnouncement_Call) Return(_a0 *helix.SendChatAnnouncementResponse, _a1 error) *MockHelixClient_SendChatAnnouncement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_SendChatAnnouncement_Call) RunAndReturn(run func(*helix.SendChatAnnouncementParams) (*helix.SendChatAnnouncementResponse, error)) *MockHelixClient_SendChatAnnouncement_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatMessage provides a mock function with given fields: params
func (_m *MockHelixClient) SendChatMessage(params *helix.SendChatMessageParams) (*helix.ChatMessageResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SendChatMessage")
	}

	var r0 *helix.ChatMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*helix.SendChatMessageParams) (*helix.ChatMessageResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*helix.SendChatMessageParams) *helix.ChatMessageResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helix.ChatMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*helix.SendChatMessageParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelixClient_SendChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatMessage'
type MockHelixClient_SendChatMessage_Call struct {
	*mock.Call
}

// SendChatMessage is a helper method to define mock.On call
//   - params *helix.SendChatMessageParams
func (_e *MockHelixClient_Expecter) SendChatMessage(params interface{}) *MockHelixClient_SendChatMessage_Call {
	return &MockHelixClient_SendChatMessage_Call{Call: _e.mock.On("SendChatMessage", params)}
}

func (_c *MockHelixClient_SendChatMessage_Call) Run(run func(params *helix.SendChatMessageParams)) *MockHelixClient_SendChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helix.SendChatMessageParams))
	})
	return _c
}

func (_c *MockHelixClient_SendChatMessage_Call) Return(_a0 *helix.ChatMessageResponse, _a1 error) *MockHelixClient_SendChatMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelixClient_SendChatMessage_Call) RunAndReturn(run func(*helix.SendChatMessageParams) (*helix.ChatMessageResponse, error)) *MockHelixClient_SendChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetAppAccessToken provides a mock function with given fields: token
func (_m *MockHelixClient) SetAppAccessToken(token string) {
	_m.Called(token)
}

// MockHelixClient_SetAppAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAppAccessToken'
type MockHelixClient_SetAppAccessToken_Call struct {
	*mock.Call
}

// SetAppAccessToken is a helper method to define mock.On call
//   - token string
func (_e *MockHelixClient_Expecter) SetAppAccessToken(token interface{}) *MockHelixClient_SetAppAccessToken_Call {
	return &MockHelixClient_SetAppAccessToken_Call{Call: _e.mock.On("SetAppAccessToken", token)}
}

func (_c *MockHelixClient_SetAppAccessToken_Call) Run(run func(token string)) *MockHelixClient_SetAppAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHelixClient_SetAppAccessToken_Call) Return() *MockHelixClient_SetAppAccessToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHelixClient_SetAppAccessToken_Call) RunAndReturn(run func(string)) *MockHelixClient_SetAppAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetRefreshToken provides a mock function with given fields: token
func (_m *MockHelixClient) SetRefreshToken(token string) {
	_m.Called(token)
}

// MockHelixClient_SetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRefreshToken'
type MockHelixClient_SetRefreshToken_Call struct {
	*mock.Call
}

// SetRefreshToken is a helper method to define mock.On call
//   - token string
func (_e *MockHelixClient_Expecter) SetRefreshToken(token interface{}) *MockHelixClient_SetRefreshToken_Call {
	return &MockHelixClient_SetRefreshToken_Call{Call: _e.mock.On("SetRefreshToken", token)}
}

func (_c *MockHelixClient_SetRefreshToken_Call) Run(run func(token string)) *MockHelixClient_SetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHelixClient_SetRefreshToken_Call) Return() *MockHelixClient_SetRefreshToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHelixClient_SetRefreshToken_Call) RunAndReturn(run func(string)) *MockHelixClient_SetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserAccessToken provides a mock function with given fields: token
func (_m *MockHelixClient) SetUserAccessToken(token string) {
	_m.Called(token)
}

// MockHelixClient_SetUserAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserAccessToken'
type MockHelixClient_SetUserAccessToken_Call struct {
	*mock.Call
}

// SetUserAccessToken is a helper method to define mock.On call
//   - token string
func (_e *MockHelixClient_Expecter) SetUserAccessToken(token interface{}) *MockHelixClient_SetUserAccessToken_Call {
	return &MockHelixClient_SetUserAccessToken_Call{Call: _e.mock.On("SetUserAccessToken", token)}
}

func (_c *MockHelixClient_SetUserAccessToken_Call) Run(run func(token string)) *MockHelixClient_SetUserAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHelixClient_SetUserAccessToken_Call) Return() *MockHelixClient_SetUserAccessToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHelixClient_SetUserAccessToken_Call) RunAndReturn(run func(string)) *MockHelixClient_SetUserAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHelixClient creates a new instance of MockHelixClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelixClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelixClient {
	mock := &MockHelixClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
