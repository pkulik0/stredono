// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	platform "github.com/pkulik0/stredono/cloud/platform"
	mock "github.com/stretchr/testify/mock"
)

// MockDocument is an autogenerated mock type for the Document type
type MockDocument struct {
	mock.Mock
}

type MockDocument_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocument) EXPECT() *MockDocument_Expecter {
	return &MockDocument_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockDocument) Create(ctx context.Context, data interface{}) (*platform.WriteResult, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *platform.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*platform.WriteResult, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *platform.WriteResult); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDocument_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
func (_e *MockDocument_Expecter) Create(ctx interface{}, data interface{}) *MockDocument_Create_Call {
	return &MockDocument_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockDocument_Create_Call) Run(run func(ctx context.Context, data interface{})) *MockDocument_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDocument_Create_Call) Return(_a0 *platform.WriteResult, _a1 error) *MockDocument_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Create_Call) RunAndReturn(run func(context.Context, interface{}) (*platform.WriteResult, error)) *MockDocument_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockDocument) Get(ctx context.Context) (platform.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 platform.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (platform.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) platform.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(platform.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDocument_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDocument_Expecter) Get(ctx interface{}) *MockDocument_Get_Call {
	return &MockDocument_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockDocument_Get_Call) Run(run func(ctx context.Context)) *MockDocument_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDocument_Get_Call) Return(_a0 platform.DocumentSnapshot, _a1 error) *MockDocument_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Get_Call) RunAndReturn(run func(context.Context) (platform.DocumentSnapshot, error)) *MockDocument_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, data, opts
func (_m *MockDocument) Set(ctx context.Context, data interface{}, opts *platform.DbOpts) (*platform.WriteResult, error) {
	ret := _m.Called(ctx, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *platform.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *platform.DbOpts) (*platform.WriteResult, error)); ok {
		return rf(ctx, data, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *platform.DbOpts) *platform.WriteResult); ok {
		r0 = rf(ctx, data, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, *platform.DbOpts) error); ok {
		r1 = rf(ctx, data, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockDocument_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
//   - opts *platform.DbOpts
func (_e *MockDocument_Expecter) Set(ctx interface{}, data interface{}, opts interface{}) *MockDocument_Set_Call {
	return &MockDocument_Set_Call{Call: _e.mock.On("Set", ctx, data, opts)}
}

func (_c *MockDocument_Set_Call) Run(run func(ctx context.Context, data interface{}, opts *platform.DbOpts)) *MockDocument_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(*platform.DbOpts))
	})
	return _c
}

func (_c *MockDocument_Set_Call) Return(_a0 *platform.WriteResult, _a1 error) *MockDocument_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Set_Call) RunAndReturn(run func(context.Context, interface{}, *platform.DbOpts) (*platform.WriteResult, error)) *MockDocument_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocument creates a new instance of MockDocument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocument(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocument {
	mock := &MockDocument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
