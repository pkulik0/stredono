// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockDocument is an autogenerated mock type for the Document type
type MockDocument struct {
	mock.Mock
}

type MockDocument_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocument) EXPECT() *MockDocument_Expecter {
	return &MockDocument_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockDocument) Create(ctx context.Context, data interface{}) (*modules.WriteResult, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *modules.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*modules.WriteResult, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *modules.WriteResult); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modules.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDocument_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
func (_e *MockDocument_Expecter) Create(ctx interface{}, data interface{}) *MockDocument_Create_Call {
	return &MockDocument_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockDocument_Create_Call) Run(run func(ctx context.Context, data interface{})) *MockDocument_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDocument_Create_Call) Return(_a0 *modules.WriteResult, _a1 error) *MockDocument_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Create_Call) RunAndReturn(run func(context.Context, interface{}) (*modules.WriteResult, error)) *MockDocument_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockDocument) Get(ctx context.Context) (modules.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 modules.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (modules.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) modules.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDocument_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDocument_Expecter) Get(ctx interface{}) *MockDocument_Get_Call {
	return &MockDocument_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockDocument_Get_Call) Run(run func(ctx context.Context)) *MockDocument_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDocument_Get_Call) Return(_a0 modules.DocumentSnapshot, _a1 error) *MockDocument_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Get_Call) RunAndReturn(run func(context.Context) (modules.DocumentSnapshot, error)) *MockDocument_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *MockDocument) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDocument_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type MockDocument_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *MockDocument_Expecter) Id() *MockDocument_Id_Call {
	return &MockDocument_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *MockDocument_Id_Call) Run(run func()) *MockDocument_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocument_Id_Call) Return(_a0 string) *MockDocument_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocument_Id_Call) RunAndReturn(run func() string) *MockDocument_Id_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, data, opts
func (_m *MockDocument) Set(ctx context.Context, data interface{}, opts modules.DbOpts) (*modules.WriteResult, error) {
	ret := _m.Called(ctx, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *modules.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, modules.DbOpts) (*modules.WriteResult, error)); ok {
		return rf(ctx, data, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, modules.DbOpts) *modules.WriteResult); ok {
		r0 = rf(ctx, data, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modules.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, modules.DbOpts) error); ok {
		r1 = rf(ctx, data, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockDocument_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
//   - opts modules.DbOpts
func (_e *MockDocument_Expecter) Set(ctx interface{}, data interface{}, opts interface{}) *MockDocument_Set_Call {
	return &MockDocument_Set_Call{Call: _e.mock.On("Set", ctx, data, opts)}
}

func (_c *MockDocument_Set_Call) Run(run func(ctx context.Context, data interface{}, opts modules.DbOpts)) *MockDocument_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(modules.DbOpts))
	})
	return _c
}

func (_c *MockDocument_Set_Call) Return(_a0 *modules.WriteResult, _a1 error) *MockDocument_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Set_Call) RunAndReturn(run func(context.Context, interface{}, modules.DbOpts) (*modules.WriteResult, error)) *MockDocument_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, updates
func (_m *MockDocument) Update(ctx context.Context, updates []modules.Update) (*modules.WriteResult, error) {
	ret := _m.Called(ctx, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *modules.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []modules.Update) (*modules.WriteResult, error)); ok {
		return rf(ctx, updates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []modules.Update) *modules.WriteResult); ok {
		r0 = rf(ctx, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modules.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []modules.Update) error); ok {
		r1 = rf(ctx, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocument_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDocument_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - updates []modules.Update
func (_e *MockDocument_Expecter) Update(ctx interface{}, updates interface{}) *MockDocument_Update_Call {
	return &MockDocument_Update_Call{Call: _e.mock.On("Update", ctx, updates)}
}

func (_c *MockDocument_Update_Call) Run(run func(ctx context.Context, updates []modules.Update)) *MockDocument_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]modules.Update))
	})
	return _c
}

func (_c *MockDocument_Update_Call) Return(_a0 *modules.WriteResult, _a1 error) *MockDocument_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocument_Update_Call) RunAndReturn(run func(context.Context, []modules.Update) (*modules.WriteResult, error)) *MockDocument_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocument creates a new instance of MockDocument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocument(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocument {
	mock := &MockDocument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
