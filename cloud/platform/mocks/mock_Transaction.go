// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// Documents provides a mock function with given fields: q
func (_m *MockTransaction) Documents(q modules.Query) modules.QueryIterator {
	ret := _m.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for Documents")
	}

	var r0 modules.QueryIterator
	if rf, ok := ret.Get(0).(func(modules.Query) modules.QueryIterator); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.QueryIterator)
		}
	}

	return r0
}

// MockTransaction_Documents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Documents'
type MockTransaction_Documents_Call struct {
	*mock.Call
}

// Documents is a helper method to define mock.On call
//   - q modules.Query
func (_e *MockTransaction_Expecter) Documents(q interface{}) *MockTransaction_Documents_Call {
	return &MockTransaction_Documents_Call{Call: _e.mock.On("Documents", q)}
}

func (_c *MockTransaction_Documents_Call) Run(run func(q modules.Query)) *MockTransaction_Documents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(modules.Query))
	})
	return _c
}

func (_c *MockTransaction_Documents_Call) Return(_a0 modules.QueryIterator) *MockTransaction_Documents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Documents_Call) RunAndReturn(run func(modules.Query) modules.QueryIterator) *MockTransaction_Documents_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: doc
func (_m *MockTransaction) Get(doc modules.Document) (modules.DocumentSnapshot, error) {
	ret := _m.Called(doc)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 modules.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(modules.Document) (modules.DocumentSnapshot, error)); ok {
		return rf(doc)
	}
	if rf, ok := ret.Get(0).(func(modules.Document) modules.DocumentSnapshot); ok {
		r0 = rf(doc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(modules.Document) error); ok {
		r1 = rf(doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransaction_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTransaction_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - doc modules.Document
func (_e *MockTransaction_Expecter) Get(doc interface{}) *MockTransaction_Get_Call {
	return &MockTransaction_Get_Call{Call: _e.mock.On("Get", doc)}
}

func (_c *MockTransaction_Get_Call) Run(run func(doc modules.Document)) *MockTransaction_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(modules.Document))
	})
	return _c
}

func (_c *MockTransaction_Get_Call) Return(_a0 modules.DocumentSnapshot, _a1 error) *MockTransaction_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransaction_Get_Call) RunAndReturn(run func(modules.Document) (modules.DocumentSnapshot, error)) *MockTransaction_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: doc, data, opts
func (_m *MockTransaction) Set(doc modules.Document, data interface{}, opts modules.DbOpts) error {
	ret := _m.Called(doc, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(modules.Document, interface{}, modules.DbOpts) error); ok {
		r0 = rf(doc, data, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockTransaction_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - doc modules.Document
//   - data interface{}
//   - opts modules.DbOpts
func (_e *MockTransaction_Expecter) Set(doc interface{}, data interface{}, opts interface{}) *MockTransaction_Set_Call {
	return &MockTransaction_Set_Call{Call: _e.mock.On("Set", doc, data, opts)}
}

func (_c *MockTransaction_Set_Call) Run(run func(doc modules.Document, data interface{}, opts modules.DbOpts)) *MockTransaction_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(modules.Document), args[1].(interface{}), args[2].(modules.DbOpts))
	})
	return _c
}

func (_c *MockTransaction_Set_Call) Return(_a0 error) *MockTransaction_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Set_Call) RunAndReturn(run func(modules.Document, interface{}, modules.DbOpts) error) *MockTransaction_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
