// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockQuery is an autogenerated mock type for the Query type
type MockQuery struct {
	mock.Mock
}

type MockQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuery) EXPECT() *MockQuery_Expecter {
	return &MockQuery_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *MockQuery) Get(ctx context.Context) modules.QueryIterator {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 modules.QueryIterator
	if rf, ok := ret.Get(0).(func(context.Context) modules.QueryIterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.QueryIterator)
		}
	}

	return r0
}

// MockQuery_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQuery_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuery_Expecter) Get(ctx interface{}) *MockQuery_Get_Call {
	return &MockQuery_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockQuery_Get_Call) Run(run func(ctx context.Context)) *MockQuery_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuery_Get_Call) Return(_a0 modules.QueryIterator) *MockQuery_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuery_Get_Call) RunAndReturn(run func(context.Context) modules.QueryIterator) *MockQuery_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function with given fields: n
func (_m *MockQuery) Limit(n int) modules.Query {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 modules.Query
	if rf, ok := ret.Get(0).(func(int) modules.Query); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.Query)
		}
	}

	return r0
}

// MockQuery_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type MockQuery_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
//   - n int
func (_e *MockQuery_Expecter) Limit(n interface{}) *MockQuery_Limit_Call {
	return &MockQuery_Limit_Call{Call: _e.mock.On("Limit", n)}
}

func (_c *MockQuery_Limit_Call) Run(run func(n int)) *MockQuery_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockQuery_Limit_Call) Return(_a0 modules.Query) *MockQuery_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuery_Limit_Call) RunAndReturn(run func(int) modules.Query) *MockQuery_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Where provides a mock function with given fields: field, op, value
func (_m *MockQuery) Where(field string, op string, value interface{}) modules.Query {
	ret := _m.Called(field, op, value)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 modules.Query
	if rf, ok := ret.Get(0).(func(string, string, interface{}) modules.Query); ok {
		r0 = rf(field, op, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.Query)
		}
	}

	return r0
}

// MockQuery_Where_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Where'
type MockQuery_Where_Call struct {
	*mock.Call
}

// Where is a helper method to define mock.On call
//   - field string
//   - op string
//   - value interface{}
func (_e *MockQuery_Expecter) Where(field interface{}, op interface{}, value interface{}) *MockQuery_Where_Call {
	return &MockQuery_Where_Call{Call: _e.mock.On("Where", field, op, value)}
}

func (_c *MockQuery_Where_Call) Run(run func(field string, op string, value interface{})) *MockQuery_Where_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQuery_Where_Call) Return(_a0 modules.Query) *MockQuery_Where_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuery_Where_Call) RunAndReturn(run func(string, string, interface{}) modules.Query) *MockQuery_Where_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuery creates a new instance of MockQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuery {
	mock := &MockQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
