// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	platform "github.com/pkulik0/stredono/cloud/platform"
	mock "github.com/stretchr/testify/mock"
)

// MockPubSubTopic is an autogenerated mock type for the PubSubTopic type
type MockPubSubTopic struct {
	mock.Mock
}

type MockPubSubTopic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubTopic) EXPECT() *MockPubSubTopic_Expecter {
	return &MockPubSubTopic_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *MockPubSubTopic) Publish(ctx context.Context, msg *platform.PubSubMessage) {
	_m.Called(ctx, msg)
}

// MockPubSubTopic_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPubSubTopic_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *platform.PubSubMessage
func (_e *MockPubSubTopic_Expecter) Publish(ctx interface{}, msg interface{}) *MockPubSubTopic_Publish_Call {
	return &MockPubSubTopic_Publish_Call{Call: _e.mock.On("Publish", ctx, msg)}
}

func (_c *MockPubSubTopic_Publish_Call) Run(run func(ctx context.Context, msg *platform.PubSubMessage)) *MockPubSubTopic_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*platform.PubSubMessage))
	})
	return _c
}

func (_c *MockPubSubTopic_Publish_Call) Return() *MockPubSubTopic_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTopic_Publish_Call) RunAndReturn(run func(context.Context, *platform.PubSubMessage)) *MockPubSubTopic_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockPubSubTopic) Stop() {
	_m.Called()
}

// MockPubSubTopic_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPubSubTopic_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPubSubTopic_Expecter) Stop() *MockPubSubTopic_Stop_Call {
	return &MockPubSubTopic_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPubSubTopic_Stop_Call) Run(run func()) *MockPubSubTopic_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubTopic_Stop_Call) Return() *MockPubSubTopic_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTopic_Stop_Call) RunAndReturn(run func()) *MockPubSubTopic_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubTopic creates a new instance of MockPubSubTopic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubTopic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubTopic {
	mock := &MockPubSubTopic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
