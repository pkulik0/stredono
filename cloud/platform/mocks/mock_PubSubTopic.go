// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockPubSubTopic is an autogenerated mock type for the PubSubTopic type
type MockPubSubTopic struct {
	mock.Mock
}

type MockPubSubTopic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubTopic) EXPECT() *MockPubSubTopic_Expecter {
	return &MockPubSubTopic_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockPubSubTopic) Close() {
	_m.Called()
}

// MockPubSubTopic_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPubSubTopic_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPubSubTopic_Expecter) Close() *MockPubSubTopic_Close_Call {
	return &MockPubSubTopic_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPubSubTopic_Close_Call) Run(run func()) *MockPubSubTopic_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubTopic_Close_Call) Return() *MockPubSubTopic_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTopic_Close_Call) RunAndReturn(run func()) *MockPubSubTopic_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *MockPubSubTopic) Publish(ctx context.Context, msg *modules.PubSubMessage) (string, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *modules.PubSubMessage) (string, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *modules.PubSubMessage) string); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *modules.PubSubMessage) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPubSubTopic_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPubSubTopic_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *modules.PubSubMessage
func (_e *MockPubSubTopic_Expecter) Publish(ctx interface{}, msg interface{}) *MockPubSubTopic_Publish_Call {
	return &MockPubSubTopic_Publish_Call{Call: _e.mock.On("Publish", ctx, msg)}
}

func (_c *MockPubSubTopic_Publish_Call) Run(run func(ctx context.Context, msg *modules.PubSubMessage)) *MockPubSubTopic_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*modules.PubSubMessage))
	})
	return _c
}

func (_c *MockPubSubTopic_Publish_Call) Return(_a0 string, _a1 error) *MockPubSubTopic_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPubSubTopic_Publish_Call) RunAndReturn(run func(context.Context, *modules.PubSubMessage) (string, error)) *MockPubSubTopic_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubTopic creates a new instance of MockPubSubTopic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubTopic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubTopic {
	mock := &MockPubSubTopic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
