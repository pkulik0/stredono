// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/pkulik0/stredono/cloud/pb"
)

// MockTTS is an autogenerated mock type for the TTS type
type MockTTS struct {
	mock.Mock
}

type MockTTS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTTS) EXPECT() *MockTTS_Expecter {
	return &MockTTS_Expecter{mock: &_m.Mock}
}

// GenerateSpeech provides a mock function with given fields: ctx, voice, text
func (_m *MockTTS) GenerateSpeech(ctx context.Context, voice string, text string) ([]byte, error) {
	ret := _m.Called(ctx, voice, text)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSpeech")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, voice, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, voice, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, voice, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTTS_GenerateSpeech_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSpeech'
type MockTTS_GenerateSpeech_Call struct {
	*mock.Call
}

// GenerateSpeech is a helper method to define mock.On call
//   - ctx context.Context
//   - voice string
//   - text string
func (_e *MockTTS_Expecter) GenerateSpeech(ctx interface{}, voice interface{}, text interface{}) *MockTTS_GenerateSpeech_Call {
	return &MockTTS_GenerateSpeech_Call{Call: _e.mock.On("GenerateSpeech", ctx, voice, text)}
}

func (_c *MockTTS_GenerateSpeech_Call) Run(run func(ctx context.Context, voice string, text string)) *MockTTS_GenerateSpeech_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTTS_GenerateSpeech_Call) Return(_a0 []byte, _a1 error) *MockTTS_GenerateSpeech_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTTS_GenerateSpeech_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *MockTTS_GenerateSpeech_Call {
	_c.Call.Return(run)
	return _c
}

// ListVoices provides a mock function with given fields: ctx, language
func (_m *MockTTS) ListVoices(ctx context.Context, language string) ([]*pb.Voice, error) {
	ret := _m.Called(ctx, language)

	if len(ret) == 0 {
		panic("no return value specified for ListVoices")
	}

	var r0 []*pb.Voice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pb.Voice, error)); ok {
		return rf(ctx, language)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pb.Voice); ok {
		r0 = rf(ctx, language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Voice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTTS_ListVoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVoices'
type MockTTS_ListVoices_Call struct {
	*mock.Call
}

// ListVoices is a helper method to define mock.On call
//   - ctx context.Context
//   - language string
func (_e *MockTTS_Expecter) ListVoices(ctx interface{}, language interface{}) *MockTTS_ListVoices_Call {
	return &MockTTS_ListVoices_Call{Call: _e.mock.On("ListVoices", ctx, language)}
}

func (_c *MockTTS_ListVoices_Call) Run(run func(ctx context.Context, language string)) *MockTTS_ListVoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTTS_ListVoices_Call) Return(_a0 []*pb.Voice, _a1 error) *MockTTS_ListVoices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTTS_ListVoices_Call) RunAndReturn(run func(context.Context, string) ([]*pb.Voice, error)) *MockTTS_ListVoices_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderName provides a mock function with given fields:
func (_m *MockTTS) ProviderName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProviderName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTTS_ProviderName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderName'
type MockTTS_ProviderName_Call struct {
	*mock.Call
}

// ProviderName is a helper method to define mock.On call
func (_e *MockTTS_Expecter) ProviderName() *MockTTS_ProviderName_Call {
	return &MockTTS_ProviderName_Call{Call: _e.mock.On("ProviderName")}
}

func (_c *MockTTS_ProviderName_Call) Run(run func()) *MockTTS_ProviderName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTTS_ProviderName_Call) Return(_a0 string) *MockTTS_ProviderName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTTS_ProviderName_Call) RunAndReturn(run func() string) *MockTTS_ProviderName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTTS creates a new instance of MockTTS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTTS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTTS {
	mock := &MockTTS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
