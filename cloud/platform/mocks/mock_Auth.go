// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// UpdateUser provides a mock function with given fields: ctx, uid, data
func (_m *MockAuth) UpdateUser(ctx context.Context, uid string, data *modules.UserToUpdate) error {
	ret := _m.Called(ctx, uid, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *modules.UserToUpdate) error); ok {
		r0 = rf(ctx, uid, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuth_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAuth_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - data *modules.UserToUpdate
func (_e *MockAuth_Expecter) UpdateUser(ctx interface{}, uid interface{}, data interface{}) *MockAuth_UpdateUser_Call {
	return &MockAuth_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, uid, data)}
}

func (_c *MockAuth_UpdateUser_Call) Run(run func(ctx context.Context, uid string, data *modules.UserToUpdate)) *MockAuth_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*modules.UserToUpdate))
	})
	return _c
}

func (_c *MockAuth_UpdateUser_Call) Return(_a0 error) *MockAuth_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_UpdateUser_Call) RunAndReturn(run func(context.Context, string, *modules.UserToUpdate) error) *MockAuth_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: ctx, token
func (_m *MockAuth) VerifyToken(ctx context.Context, token string) (modules.Token, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 modules.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (modules.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) modules.Token); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockAuth_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuth_Expecter) VerifyToken(ctx interface{}, token interface{}) *MockAuth_VerifyToken_Call {
	return &MockAuth_VerifyToken_Call{Call: _e.mock.On("VerifyToken", ctx, token)}
}

func (_c *MockAuth_VerifyToken_Call) Run(run func(ctx context.Context, token string)) *MockAuth_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_VerifyToken_Call) Return(_a0 modules.Token, _a1 error) *MockAuth_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_VerifyToken_Call) RunAndReturn(run func(context.Context, string) (modules.Token, error)) *MockAuth_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
