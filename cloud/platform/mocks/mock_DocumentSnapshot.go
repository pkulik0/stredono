// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockDocumentSnapshot is an autogenerated mock type for the DocumentSnapshot type
type MockDocumentSnapshot struct {
	mock.Mock
}

type MockDocumentSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocumentSnapshot) EXPECT() *MockDocumentSnapshot_Expecter {
	return &MockDocumentSnapshot_Expecter{mock: &_m.Mock}
}

// DataTo provides a mock function with given fields: v
func (_m *MockDocumentSnapshot) DataTo(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for DataTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDocumentSnapshot_DataTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataTo'
type MockDocumentSnapshot_DataTo_Call struct {
	*mock.Call
}

// DataTo is a helper method to define mock.On call
//   - v interface{}
func (_e *MockDocumentSnapshot_Expecter) DataTo(v interface{}) *MockDocumentSnapshot_DataTo_Call {
	return &MockDocumentSnapshot_DataTo_Call{Call: _e.mock.On("DataTo", v)}
}

func (_c *MockDocumentSnapshot_DataTo_Call) Run(run func(v interface{})) *MockDocumentSnapshot_DataTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockDocumentSnapshot_DataTo_Call) Return(_a0 error) *MockDocumentSnapshot_DataTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSnapshot_DataTo_Call) RunAndReturn(run func(interface{}) error) *MockDocumentSnapshot_DataTo_Call {
	_c.Call.Return(run)
	return _c
}

// Ref provides a mock function with given fields:
func (_m *MockDocumentSnapshot) Ref() modules.Document {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ref")
	}

	var r0 modules.Document
	if rf, ok := ret.Get(0).(func() modules.Document); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.Document)
		}
	}

	return r0
}

// MockDocumentSnapshot_Ref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ref'
type MockDocumentSnapshot_Ref_Call struct {
	*mock.Call
}

// Ref is a helper method to define mock.On call
func (_e *MockDocumentSnapshot_Expecter) Ref() *MockDocumentSnapshot_Ref_Call {
	return &MockDocumentSnapshot_Ref_Call{Call: _e.mock.On("Ref")}
}

func (_c *MockDocumentSnapshot_Ref_Call) Run(run func()) *MockDocumentSnapshot_Ref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocumentSnapshot_Ref_Call) Return(_a0 modules.Document) *MockDocumentSnapshot_Ref_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSnapshot_Ref_Call) RunAndReturn(run func() modules.Document) *MockDocumentSnapshot_Ref_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocumentSnapshot creates a new instance of MockDocumentSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocumentSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocumentSnapshot {
	mock := &MockDocumentSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
