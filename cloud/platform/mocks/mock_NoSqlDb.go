// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	platform "github.com/pkulik0/stredono/cloud/platform"
	mock "github.com/stretchr/testify/mock"
)

// MockNoSqlDb is an autogenerated mock type for the NoSqlDb type
type MockNoSqlDb struct {
	mock.Mock
}

type MockNoSqlDb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoSqlDb) EXPECT() *MockNoSqlDb_Expecter {
	return &MockNoSqlDb_Expecter{mock: &_m.Mock}
}

// Collection provides a mock function with given fields: path
func (_m *MockNoSqlDb) Collection(path string) platform.Collection {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 platform.Collection
	if rf, ok := ret.Get(0).(func(string) platform.Collection); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(platform.Collection)
		}
	}

	return r0
}

// MockNoSqlDb_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockNoSqlDb_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - path string
func (_e *MockNoSqlDb_Expecter) Collection(path interface{}) *MockNoSqlDb_Collection_Call {
	return &MockNoSqlDb_Collection_Call{Call: _e.mock.On("Collection", path)}
}

func (_c *MockNoSqlDb_Collection_Call) Run(run func(path string)) *MockNoSqlDb_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNoSqlDb_Collection_Call) Return(_a0 platform.Collection) *MockNoSqlDb_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoSqlDb_Collection_Call) RunAndReturn(run func(string) platform.Collection) *MockNoSqlDb_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoSqlDb creates a new instance of MockNoSqlDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoSqlDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoSqlDb {
	mock := &MockNoSqlDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
