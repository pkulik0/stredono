// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modules "github.com/pkulik0/stredono/cloud/platform/modules"
	mock "github.com/stretchr/testify/mock"
)

// MockObject is an autogenerated mock type for the Object type
type MockObject struct {
	mock.Mock
}

type MockObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObject) EXPECT() *MockObject_Expecter {
	return &MockObject_Expecter{mock: &_m.Mock}
}

// Attrs provides a mock function with given fields: ctx
func (_m *MockObject) Attrs(ctx context.Context) (*modules.ObjectAttrs, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *modules.ObjectAttrs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*modules.ObjectAttrs, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *modules.ObjectAttrs); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modules.ObjectAttrs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObject_Attrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attrs'
type MockObject_Attrs_Call struct {
	*mock.Call
}

// Attrs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObject_Expecter) Attrs(ctx interface{}) *MockObject_Attrs_Call {
	return &MockObject_Attrs_Call{Call: _e.mock.On("Attrs", ctx)}
}

func (_c *MockObject_Attrs_Call) Run(run func(ctx context.Context)) *MockObject_Attrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObject_Attrs_Call) Return(_a0 *modules.ObjectAttrs, _a1 error) *MockObject_Attrs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObject_Attrs_Call) RunAndReturn(run func(context.Context) (*modules.ObjectAttrs, error)) *MockObject_Attrs_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockObject) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObject_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockObject_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockObject_Expecter) Name() *MockObject_Name_Call {
	return &MockObject_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockObject_Name_Call) Run(run func()) *MockObject_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_Name_Call) Return(_a0 string) *MockObject_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObject_Name_Call) RunAndReturn(run func() string) *MockObject_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter provides a mock function with given fields: ctx
func (_m *MockObject) NewWriter(ctx context.Context) modules.Writer {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 modules.Writer
	if rf, ok := ret.Get(0).(func(context.Context) modules.Writer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modules.Writer)
		}
	}

	return r0
}

// MockObject_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type MockObject_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObject_Expecter) NewWriter(ctx interface{}) *MockObject_NewWriter_Call {
	return &MockObject_NewWriter_Call{Call: _e.mock.On("NewWriter", ctx)}
}

func (_c *MockObject_NewWriter_Call) Run(run func(ctx context.Context)) *MockObject_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObject_NewWriter_Call) Return(_a0 modules.Writer) *MockObject_NewWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObject_NewWriter_Call) RunAndReturn(run func(context.Context) modules.Writer) *MockObject_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}

// SetPublicRead provides a mock function with given fields: ctx
func (_m *MockObject) SetPublicRead(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetPublicRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObject_SetPublicRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPublicRead'
type MockObject_SetPublicRead_Call struct {
	*mock.Call
}

// SetPublicRead is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObject_Expecter) SetPublicRead(ctx interface{}) *MockObject_SetPublicRead_Call {
	return &MockObject_SetPublicRead_Call{Call: _e.mock.On("SetPublicRead", ctx)}
}

func (_c *MockObject_SetPublicRead_Call) Run(run func(ctx context.Context)) *MockObject_SetPublicRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObject_SetPublicRead_Call) Return(_a0 error) *MockObject_SetPublicRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObject_SetPublicRead_Call) RunAndReturn(run func(context.Context) error) *MockObject_SetPublicRead_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObject creates a new instance of MockObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObject {
	mock := &MockObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
