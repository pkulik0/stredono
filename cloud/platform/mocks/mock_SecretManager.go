// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSecretManager is an autogenerated mock type for the SecretManager type
type MockSecretManager struct {
	mock.Mock
}

type MockSecretManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretManager) EXPECT() *MockSecretManager_Expecter {
	return &MockSecretManager_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function with given fields: ctx, name, version
func (_m *MockSecretManager) GetSecret(ctx context.Context, name string, version string) ([]byte, error) {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, name, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockSecretManager_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockSecretManager_Expecter) GetSecret(ctx interface{}, name interface{}, version interface{}) *MockSecretManager_GetSecret_Call {
	return &MockSecretManager_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, name, version)}
}

func (_c *MockSecretManager_GetSecret_Call) Run(run func(ctx context.Context, name string, version string)) *MockSecretManager_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSecretManager_GetSecret_Call) Return(_a0 []byte, _a1 error) *MockSecretManager_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretManager_GetSecret_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *MockSecretManager_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretManager creates a new instance of MockSecretManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretManager {
	mock := &MockSecretManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
