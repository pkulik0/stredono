// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockKeyManager is an autogenerated mock type for the KeyManager type
type MockKeyManager struct {
	mock.Mock
}

type MockKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyManager) EXPECT() *MockKeyManager_Expecter {
	return &MockKeyManager_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: ctx, keyName, data
func (_m *MockKeyManager) Decrypt(ctx context.Context, keyName string, data []byte) ([]byte, error) {
	ret := _m.Called(ctx, keyName, data)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) ([]byte, error)); ok {
		return rf(ctx, keyName, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(ctx, keyName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, keyName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyManager_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockKeyManager_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyName string
//   - data []byte
func (_e *MockKeyManager_Expecter) Decrypt(ctx interface{}, keyName interface{}, data interface{}) *MockKeyManager_Decrypt_Call {
	return &MockKeyManager_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, keyName, data)}
}

func (_c *MockKeyManager_Decrypt_Call) Run(run func(ctx context.Context, keyName string, data []byte)) *MockKeyManager_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockKeyManager_Decrypt_Call) Return(_a0 []byte, _a1 error) *MockKeyManager_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyManager_Decrypt_Call) RunAndReturn(run func(context.Context, string, []byte) ([]byte, error)) *MockKeyManager_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: ctx, keyName, data
func (_m *MockKeyManager) Encrypt(ctx context.Context, keyName string, data []byte) ([]byte, error) {
	ret := _m.Called(ctx, keyName, data)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) ([]byte, error)); ok {
		return rf(ctx, keyName, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(ctx, keyName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, keyName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyManager_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockKeyManager_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyName string
//   - data []byte
func (_e *MockKeyManager_Expecter) Encrypt(ctx interface{}, keyName interface{}, data interface{}) *MockKeyManager_Encrypt_Call {
	return &MockKeyManager_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, keyName, data)}
}

func (_c *MockKeyManager_Encrypt_Call) Run(run func(ctx context.Context, keyName string, data []byte)) *MockKeyManager_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockKeyManager_Encrypt_Call) Return(_a0 []byte, _a1 error) *MockKeyManager_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyManager_Encrypt_Call) RunAndReturn(run func(context.Context, string, []byte) ([]byte, error)) *MockKeyManager_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyManager creates a new instance of MockKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyManager {
	mock := &MockKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
